<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何将PubMed导出BibTex并导入Bibliometrix</title>
    <url>/2021/01/24/PubMed-Bibliometrix/</url>
    <content><![CDATA[<p>上期介绍了怎么用bibliometrix，但是我发现导师要求找的数据库是PubMed而新版的PubMed没有导出BibTex的功能，这可怎么办呢，我又求助万能的谷歌，鼓捣了半天，找到了两种方法～</p>
<ul>
<li><p>方法一：通过 Endnote 转换</p>
</li>
<li><p>方法二：通过 python 转换</p>
</li>
</ul>
<p>这两种方法整体而言没有什么差别，只是看哪个用着更顺手而已，从bib文件就可以看出，由于PubMed本身的局限性，无论是哪种方法都没有办法做到Web of Science那种程度的信息量，WoS里面不仅会有每篇文章的基本信息，还会包括每篇参考文献、作者机构、国家等等，实际上只有这种等级的信息量才能够最大限度利用bibliometrix，因此还是推荐WoS进行分析。但既然都找到方法了，那就继续写完好啦，毕竟不然不就白瞎了嘛～</p>
<h2 id="通过Endnote转换"><a href="#通过Endnote转换" class="headerlink" title="通过Endnote转换"></a>通过Endnote转换</h2><p>前提：</p>
<ul>
<li>安装最新版正版Endnote并新建一个Library</li>
</ul>
<p>方法：</p>
<ol>
<li><p>从PubMed找到所需文献</p>
</li>
<li><p>Send to - Citation Manager - All Results - Create Files</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmylfvf5qrj32800sudkw.jpg"></p>
</li>
<li><p>点击下载完毕的文档，用相应的Library打开</p>
</li>
<li><p>成功加进Endnote后导出</p>
<p>File - Export - TXT - BibTex</p>
<p>如果这里没有BibTex的选项，则需要手动添加——</p>
<ol>
<li><p>Tools - Output Styles - open style manager </p>
</li>
<li><p>找到 BibTex 并勾选</p>
</li>
<li><p>如果没有 BibTex 的选项，则点击 Get more on Web 并在弹出的网页搜索 BibTex</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmymdojgqpj31qs0u0du5.jpg"></p>
</li>
<li><p>点击 Download 下载并将下载好的文件放到 Endnote - Styles 文件夹里就有啦</p>
</li>
</ol>
</li>
</ol>
<h2 id="通过-python-转换"><a href="#通过-python-转换" class="headerlink" title="通过 python 转换"></a>通过 python 转换</h2><p>前提：</p>
<ul>
<li>已有Python3和相应编程软件如Visual Code Studio</li>
</ul>
<p>方法：</p>
<ol>
<li><p>从PubMed下载所需文献的PMID导出</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmymee9oq6j320v0u0te1.jpg"></p>
</li>
<li><p>打开 terminal 用 pip 下载 <a href="https://pypi.org/project/pubmed-bibtex/">pubmed_bibtex</a> 这个库可以将PMID转换为对应的BibTex信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m pip install pubmed-bibtex</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建python文件，读取下载的文档、转换并写入 bibtex</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pubmed_bibtex <span class="keyword">import</span> bibtex_entry_from_pmid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">inputFile = open(<span class="string">&quot;pmid-physicalac-set.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="comment">#只有将下载的PMID文档放入python文件同一个文件夹才可以用相对路径 否则用绝对路径</span></span><br><span class="line">outputFile = open(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)            <span class="comment">#新建输出文档</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> inputFile.readlines():                          <span class="comment">#依次读取每行  </span></span><br><span class="line">    line = line.strip()                             <span class="comment">#去掉每行头尾空白  </span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))							</span><br><span class="line">    bibMes = bibtex_entry_from_pmid(int(line))</span><br><span class="line">    print(bibMes)</span><br><span class="line">    outputFile.write(bibMes)                       <span class="comment">#写入输出文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">inputFile.close()</span><br><span class="line">outputFile.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这个时候python文件所在文件夹里就应该有一个名为 output.txt 的文档，里面就是相对应的信息啦，把后缀改为.bib就可以放入 biblioshiny里啦。</p>
<p>P.S. 只是因为这个库依托的是TexMed，所以转换速度会慢一些，如果量大的话可能得等一阵。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>鼓捣文献</category>
      </categories>
      <tags>
        <tag>Research</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用bibliometrix进行文献综述准备</title>
    <url>/2021/01/24/bibliometrix/</url>
    <content><![CDATA[<p>怎么快速了解一个科研领域写文献综述？听说可以用bibliometrix。</p>
<p>bibliometrix是一个R包，一般用来做文献计量，也可以用来在文献综述初期对一个领域进行一个整体的了解——这一领域主要的期刊是什么，主要作者是谁，高引用量的文献有什么，研究趋势和未来可能的研究热点是什么……</p>
<h2 id="安装Bibliometrix"><a href="#安装Bibliometrix" class="headerlink" title="安装Bibliometrix"></a>安装Bibliometrix</h2><ol>
<li><p>安装R和RStudio</p>
</li>
<li><p>安装bibliometrix</p>
<p>打开RStudio，新建一个RScript并写入以下代码——</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages(<span class="string">&quot;bibliometrix&quot;</span>) </span><br><span class="line"><span class="keyword">library</span>(bibliometrix) </span><br><span class="line">biblioshiny()</span><br></pre></td></tr></table></figure>

<p>运行然后RStudio就会自动安装bibliometrix包</p>
<p>再次运行会自动弹出一个网页（如下图），就表示启动成功啦</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmy1hbg47nj31c00u0wpo.jpg"></p>
</li>
</ol>
<h2 id="准备文献列表"><a href="#准备文献列表" class="headerlink" title="准备文献列表"></a>准备文献列表</h2><p>bibliometrix可以批量导入bibTex格式的文献列表，这里就以web of science为例演示一下如何生成文献列表。</p>
<ol>
<li><p>打开web of science页面，选择 web of science 核心数据库</p>
</li>
<li><p>输入所需要的关键词进行检索</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmy1l7k4yoj31c00u07gy.jpg"></p>
</li>
<li><p>导出为其他格式文件格式-全记录与引用的参考文献-bibTex</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmy1pdcweqj31c00u0h89.jpg"></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmy1pjfrdrj31c00u0arn.jpg"></p>
</li>
<li><p>由于web of science一次只能导出500个，所以可以多导出几次。如果是多次导出的话就将所有的.bib文件压缩（因为bibliometrix一次只能import一个文件）。</p>
</li>
</ol>
<h2 id="使用Bibliometrix"><a href="#使用Bibliometrix" class="headerlink" title="使用Bibliometrix"></a>使用Bibliometrix</h2><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><ol>
<li><p>选择Data - Import or Load Files</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmy1rec5afj31c00u015g.jpg"></p>
</li>
<li><p>选择 import raw files - 选择相应的数据库（Web of Science）- Choose File - Start</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmy1t5go98j318o0u043s.jpg"></p>
</li>
</ol>
<h3 id="按需分析"><a href="#按需分析" class="headerlink" title="按需分析"></a>按需分析</h3><p>我将每个按钮的用法都解释一下，大家可以按需使用自己需要的。</p>
<p>Filter：按照一定条件从导入的文档中进行筛选，如年份、文章类型等。</p>
<p>Sources: 期刊分析，即导入的文档列表中最常收录该领域文章的期刊有哪些。</p>
<p>Authors: 作者分析，即导入的文档列表中发表文章数量最多的作者、所属单位和国家是什么，其中可以分析每个作者随着时间变化发表的趋势等。</p>
<p>Documents: 文章分析，即导入的文档列表中被引用数量最多的文献是哪一篇，以及根据摘要/关键词等绘出词云、近期的热点和未来的方向。值得说明的是 Global Cited 和 Local Cited 的区别，我的理解是Local Cited更像是领域内部互相的认可度，所以更加具有参考价值。</p>
<p>Conceptual Structure - Thematic Map: 领域分析，即哪些方向更值得研究，越右上角越promising；以及不同方向之间的关联如何。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/179176839">了解一个全新领域有没有什么更好的办法？</a></p>
]]></content>
      <categories>
        <category>鼓捣文献</category>
      </categories>
      <tags>
        <tag>Research</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将anki转成csv</title>
    <url>/2021/07/06/anki-to-csv/</url>
    <content><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先需要两个插件，分别是 <a href="https://ankiweb.net/shared/info/1967530655">csv converter</a> 和 <a href="https://ankiweb.net/shared/info/874215009">Advanced Browser</a></p>
<p>安装过程：进入anki - 工具 - 插件 （快捷键 Shift+command+A）- 获取插件 - 输入代码 874215009 和 1967530655</p>
<p>安装后重启就可以使用</p>
<h3 id="找到需要导出的列"><a href="#找到需要导出的列" class="headerlink" title="找到需要导出的列"></a>找到需要导出的列</h3><p>anki 主页 - 浏览，找到所需要的牌组，在右边标题栏找到对应所需的列。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs7nd6zmkej31fi0tgao4.jpg" alt="截屏2021-07-06 下午11.29.03"></p>
<h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>都展示在浏览里后，选出需要导出的卡（通常是全选），然后点击标题栏 - Export selected - cards with column shown - to csv 就可以啦</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs7ngce13dj30ta0dwh36.jpg" alt="截屏2021-07-06 下午11.31.38"></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>anki</tag>
      </tags>
  </entry>
  <entry>
    <title>aria2安装+使用</title>
    <url>/2020/09/08/aria2/</url>
    <content><![CDATA[<p>好久之前下过 aria2, 不过很久没用，时间太久都已经忘了怎么用了，所以今天心血来潮又重新折腾了一番，</p>
<h1 id="旧Aira2卸载删除"><a href="#旧Aira2卸载删除" class="headerlink" title="旧Aira2卸载删除"></a>旧Aira2卸载删除</h1><p>没下载过的话就可以跳过这部分啦。</p>
<p>查找文件。</p>
<pre><code>➜  sudo pkgutil --pkgs | grep --color aria2     
aria2.paths
aria2</code></pre>
<p>找到文件所在位置。</p>
<pre><code>➜ sudo pkgutil --only-files --files aria2.paths
manpaths.d/aria2
paths.d/aria2c
➜ sudo pkgutil --only-files --files aria2      
bin/aria2c
share/doc/aria2/AUTHORS
share/doc/aria2/COPYING
share/doc/aria2/Changelog
share/doc/aria2/NEWS
share/doc/aria2/README
share/doc/aria2/README.html
share/doc/aria2/README.rst
share/doc/aria2/bash_completion/README.txt
share/doc/aria2/bash_completion/aria2c
share/doc/aria2/xmlrpc/README.txt
share/doc/aria2/xmlrpc/aria2mon
share/doc/aria2/xmlrpc/aria2rpc
share/man/man1/aria2c.1
share/man/pt/man1/aria2c.1
share/man/ru/man1/aria2c.1</code></pre>
<p>根据上面返回的结果卸载。</p>
<pre><code>➜ sudo rm -rf /private/etc/manpaths.d/aria2
➜ sudo rm -rf /private/etc/paths.d/aria2c
➜ sudo rm -rf /usr/local/aria2 </code></pre>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/e25304ce243b">Mac 下彻底删除 Aria2</a></p>
<h1 id="安装Aria2"><a href="#安装Aria2" class="headerlink" title="安装Aria2"></a>安装Aria2</h1><p>从<a href="https://aria2.github.io/">这里</a>下载最新版本，下载后点开安装即可。</p>
<p>下载配置文件，用文本编辑打开，将第二行修改第二行“ dir=/Users/XXX/Downloads”</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gije0f0vx3j311404uju2.jpg" alt="aria-01"></p>
<p>新建一个隐藏文件夹。</p>
<pre><code>mkdir ~/.aria2</code></pre>
<p>去到finder，按Command+Shift+.使隐藏文件夹可见，找到.aria2文件夹，把刚刚的 aria2.conf拖进去。</p>
<p>下载<a href="https://yalv.me/downloads/aria2/aria2c.zip">应用文件</a>，解压后放到「应用程序」文件夹中。</p>
<p>在终端中运行 aria2.</p>
<pre><code>aria2c</code></pre>
<p>检查 Aria2c 是否运行。</p>
<pre><code>ps aux|grep aria2c</code></pre>
<p>如果输出类似则为正常。</p>
<pre><code>whitelephant     15967   0.0  0.0  5286740    728 s000  S+    3:47下午   0:00.01 grep aria2c
whitelephant     14893   0.0  0.0  5286740   1076   ??  Ss    3:47下午   0:00.01 aria2c</code></pre>
<h1 id="使用Aria2"><a href="#使用Aria2" class="headerlink" title="使用Aria2"></a>使用Aria2</h1><h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><p>如果习惯使用命令行的话可以直接在终端里使用Aria2.</p>
<pre><code>aria2c http://example.org/mylinux.iso</code></pre>
<p>同时下载多个链接。</p>
<pre><code>aria2c http://a/f.iso ftp://b/f.iso</code></pre>
<p>下载种子文件。</p>
<pre><code>aria2c http://example.org/mylinux.torrent</code></pre>
<p>下载磁力链接。</p>
<pre><code>aria2c &#39;magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C&#39;</code></pre>
<p>参考：<br><a href="https://yalv.me/aria2/">mac 配置 aria2</a></p>
<h2 id="交互UI使用"><a href="#交互UI使用" class="headerlink" title="交互UI使用"></a>交互UI使用</h2><p>如果不习惯命令行，想像app一样直观的看的话，可以用 <a href="https://ziahamza.github.io/webui-aria2">Webui-aria2</a>。</p>
<p>在命令行里输入。</p>
<pre><code>https://ziahamza.github.io/webui-aria2</code></pre>
<p>然后进入刚刚的链接，进入设置（最好使用chrome），做一下必要的更改。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijebzmm4aj312y0ran2p.jpg" alt="aria-02"></p>
<hr>
<p>就设置完成啦，想下载的时候直接点添加-下载链接就可以啦。</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>downloader</tag>
      </tags>
  </entry>
  <entry>
    <title>如何直接在浏览器网页上高亮文本内容？(DIIGO)</title>
    <url>/2020/09/07/chrome-highlight-2/</url>
    <content><![CDATA[<p>之前我介绍了我比较喜欢的MarkUp 但后来发现Diigo功能更齐全 于是就想也写个Diigo版的 就酱 开始啦～</p>
<p>Diigo是一款chrome插件 可以在网页上高亮文本、进行笔记整理等。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>点击Diigo拓展进行安装 然后进行注册/登陆</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibsq61mzg30xc0h4dzp.gif" alt="9808904-89a822a3a30c9b9f"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>▷高亮 方法1：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibsqzou2g30xc0h4wg3.gif" alt="9808904-ab84e97db37bf854"></p>
<p>▷整理高亮内容：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibsucnb9g30xc0h4q7j.gif" alt="9808904-caaf8c575a8b6e02"></p>
<p>▷视频截图&amp;整理</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibsyhai9g30xc0h4qv5.gif" alt="9808904-ac873d03b137beb8"></p>
<p>▷高亮 方法2</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibsyyf0ag30xc0h4wg3.gif" alt="9808904-6714a76c289b63ae"></p>
<p>▷在文本旁添加笔记</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibt0xaiwg30xc0h475h.gif" alt="9808904-75a0a28e231ebeef"></p>
<p>▷在网页上添加笔记</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibt3mdxbg30xc0h4dig.gif" alt="9808904-012f92c3f27acf22"></p>
<p>▷复制高亮内容</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibt5uk23g30xc0h4goh.gif" alt="9808904-c69e2dced99ea28b"></p>
<p>▷ diigo会自动将高亮过的网页存储在个人的DIigo里以供之后使用 可以添加标签tag以便以后整理使用 也可以删除（删除会自动删除所有高亮内容）</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibta9mdmg30xc0h4q77.gif" alt="9808904-e44a1749895b6fcc"></p>
<p>▷ 删除笔记</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibtdx29hg30xc0h475a.gif" alt="9808904-42eb60e0dcf363ce"></p>
<p>▷ 删除高亮</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giibti1a45g30xc0h4q3u.gif" alt="9808904-1dd8c563005beaff"></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/05/hello-world/</url>
    <content><![CDATA[<p>作为一个只学过一点python的小白，终于！经过两天的倒腾，终于搞定了这个个人网页！呱唧呱唧喜大普奔！</p>
]]></content>
  </entry>
  <entry>
    <title>谷歌搜索命令</title>
    <url>/2022/02/12/google%20search/</url>
    <content><![CDATA[<p><strong>站内全文搜索</strong> </p>
<p>site: 链接 关键词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">site:www.zhihu.com 博尔赫斯</span><br></pre></td></tr></table></figure>

<p><strong>特定文件类型搜索</strong></p>
<p>filetype:文件类型 关键词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filetype:pdf 博尔赫斯</span><br></pre></td></tr></table></figure>

<p><strong>链接内关键词</strong></p>
<p>在网页的url地址中查找，例如：inurl:dowload 表示查找url中包含download的网页。</p>
<p><strong>查询类似网页</strong></p>
<p>related: 寻找某网页的“类似网页”。例如：related:<a href="http://www.zhihu.com/">www.zhihu.com</a> 表示找和“知乎”类似的网页。</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 优化 II</title>
    <url>/2020/09/07/hexo-2/</url>
    <content><![CDATA[<h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><p>我来打脸了，用了两天突然发现 tags 还是挺实用的，所以又来设置标签页了……</p>
<p>增加标签页面，会生成一个 source/tags/index.md 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>打开后在title下面增加两行。</p>
<pre><code>type: tags
comments: false</code></pre>
<p>然后在主题的 _config.yml 文件里，在menu里打开tags就可以啦。</p>
<pre><code>tags: /tags/ || fa fa-tags</code></pre>
<h1 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h1><p>原来 Next 的老版本中能够自动节选文章开头作为摘录放到首页，然后有点击阅读更多的按钮，但是在最新版本中 Hexo 的开发者们把这个功能去掉了，所以现在如果想节选摘录的话主要有两种方法。</p>
<h2 id="1-手动分割"><a href="#1-手动分割" class="headerlink" title="1. 手动分割"></a>1. 手动分割</h2><p>这是 Hexo 内置的方式，在每篇文章想要截取的位置写入一下代码，之后首页就会自动截取。</p>
<pre><code>&lt;!-- more --&gt;</code></pre>
<h2 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h2><p>向我这种懒人，实在是懒得每篇都加，写着写着很可能忘了不说，看着自己写的我总是拿不准要在哪里截比较好，好像哪里都怪怪的，还是觉着这种事交给机器做比较好。</p>
<p>安装插件。</p>
<pre><code>npm install hexo-excerpt --save    </code></pre>
<p>然后就可以了，不过我自己觉着默认的摘录还是内容有点多，想改一下设置，就去 Hexo Program 的_config.yml 里加了两行。</p>
<pre><code>excerpt:
  depth: 5 #截取的数量 默认是10
  excerpt_excludes: []
  more_excludes: []
  hideWholePostExcerpts: true</code></pre>
<h1 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h1><p>更改字体</p>
<p>Hexo Next 毕竟是以英文为主进行开发的，对中文字体的挑选肯定就没有英文那么好，所以我就想自己修改一下字体。</p>
<p>进入主题的_config.yml 配置文件，找到 fonts 部分把字体部分功能打开。</p>
<pre><code>font:
  enable: true</code></pre>
<p>进行修改，可以自己在 Google Fonts 里找到喜欢的字体，然后加到想改的部分（标题、正文、全局……）</p>
<pre><code>global: #修改全局字体
  external: true
  family: Noto Serif SC
  size:

title: #修改标题字体
  external: true
  family: 
  size:

headings: #修改文章里的小标题字体
  external: true
  family: Noto Serif SC
  size:

posts: #修改文章内容
  external: true
  family:

codes: #修改代码块字体
  external: true
  family:</code></pre>
<h1 id="添加阅读量统计和评论功能"><a href="#添加阅读量统计和评论功能" class="headerlink" title="添加阅读量统计和评论功能"></a>添加阅读量统计和评论功能</h1><p>Next 里提供了两种阅读量统计的功能——valine 和 LeanCloud，但是实际上两个都是依托于 LeanCloud，所以我们首先需要注册 <a href="https://www.leancloud.cn/">LeanCloud</a> 账户，注册后创建应用，</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gii9htwgh2j31fe0sm0xj.jpg" alt="valine-01"></p>
<p>创建应用后进入应用，分别创建名为 Comment 和 Counter 的两个 class。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gii9xd5e83j319w0u0do5.jpg" alt="valine-02"></p>
<p>创建后，进入 设置-应用Keys，记下来 AppID 和 APPKey，填入主题的_config.yml 相应的位置。</p>
<pre><code>valine:
  enable: true #打开
  appid: # 填入appid
  appkey: # 填入appkey
  placeholder: Just go go #默认评论栏里是什么字
  language: zh-cn # 设置一下语言
  visitor: true # 打开
  comment_count: true #打开阅读次数技术</code></pre>
<p>打开 <a href="https://www.jsdelivr.com/package/npm/valine">valine</a> 网页，找到最新版的地址。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gii9pzkjkaj31pb0u0n4x.jpg" alt="valine-03"></p>
<p>填写进主题的_config.yml 相应位置。</p>
<pre><code># Valine
  # valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js
  # valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.10/Valine.min.js
  valine: https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/Valine.min.js</code></pre>
<p>进入 Hexo 的_config.yml ，URL一栏填入你的网站地址。</p>
<pre><code># URL
## If your site is put in a subdirectory, set url as &#39;http://example.com/child&#39; and root as &#39;/child/&#39;
url: #填这里</code></pre>
<p>现在已经基本大功告成啦，但是现在评论那里显示的是「valine:0」而不是「评论数：0」，需要我们手动更改一下。</p>
<p>进入 themes/next/languages/zh-CN.yml，在post下面添加一行：</p>
<pre><code>comments.valine: 评论数</code></pre>
<p>就可以啦。</p>
<p>对了，开启评论之后默认的是所有文章都会开启，想不开启的话（比如分类页和标签页的index）要在文章最开头写title的那里写上。</p>
<pre><code>comments: false</code></pre>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何直接在chrome浏览器网页上高亮文本内容？</title>
    <url>/2020/09/07/chrome-highlight/</url>
    <content><![CDATA[<p>写东西的时候经常会在网页上看到一些有用的内容 但通常会打开好几个标签页好几千字 竟然在开始动笔的时候就找不到需要的那段话去哪儿了 经过一番寻找和对比（主要是对比Diigo和CollaMark），最终发现了 <a href="https://link.jianshu.com/?t=https://chrome.google.com/webstore/detail/pdf-markup-my-web-markups/cbjngbfjehiofmihfpodinolkcokdojp">Markup</a> 拓展是我想要的那一款！</p>
<p>优势：</p>
<ul>
<li><p>标注后网页高亮</p>
</li>
<li><p>页面旁同时也有一个个内容标签</p>
</li>
<li><p>主页里留有标注的出处网址</p>
</li>
</ul>
<p>方法：</p>
<ol>
<li><p>点击上面的链接 将markup加载自己的拓展里<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiaxny04yg30xc0h44nr.gif" alt="9808904-e43e1bdaa2048e9d"></p>
</li>
<li><p>进入markup官网注册<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiaxtbs4wg30xc0h4n1g.gif" alt="9808904-10285bc0ed9fae83"></p>
</li>
<li><p>注册之后进入 看到的这些内容都是其他人标注的内容 不用管这些 把它关掉 就可以愉快的开始标注啦<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiay0r90rg30xc0h4dm6.gif" alt="9808904-879b9225b7c3256e"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
        <tag>pages</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 截整个网页图片的方法以及ocr的方法</title>
    <url>/2022/01/29/mac%20-%20ocr/</url>
    <content><![CDATA[<h2 id="截整个网页图片的方法"><a href="#截整个网页图片的方法" class="headerlink" title="截整个网页图片的方法"></a>截整个网页图片的方法</h2><p>方法如下——</p>
<ol>
<li>用chrome打开需要截图的网页</li>
<li>右键-检查</li>
<li>shift+commad+P</li>
<li>搜索screen</li>
<li>找到并点击 capture full size screen</li>
<li>等待下载完成</li>
</ol>
<h2 id="mac图片转文字-ocr"><a href="#mac图片转文字-ocr" class="headerlink" title="mac图片转文字 ocr"></a>mac图片转文字 ocr</h2><p>方法：uttols</p>
<ul>
<li>下载插件OCR-图片转文字</li>
<li>选择需要ocr的图片 复制</li>
<li>打开utools 选择ocr图片转文字</li>
</ul>
<h2 id="pdf-转文字-ocr"><a href="#pdf-转文字-ocr" class="headerlink" title="pdf 转文字 ocr"></a>pdf 转文字 ocr</h2><p>方法：adobe acrobat pro</p>
<ul>
<li>打开</li>
<li>导出doc即可</li>
</ul>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Github Pages 搭建个人网站</title>
    <url>/2020/09/05/hexo-building/</url>
    <content><![CDATA[<p>作为一名基本不会编程只学了一阵python的真·小白，记录一下探索的过程～</p>
<h1 id="Github新建项目"><a href="#Github新建项目" class="headerlink" title="Github新建项目"></a>Github新建项目</h1><p>在 GitHub 新建一个仓库（Repository），然后去到 Settings，开启Github Pages，成功后就会提示你可以在https://{username}.github.io/{Repository Name}/中进行发布。</p>
<p>比如我的github username是whitelephantee，如果我建一个叫做YujiaZhou的Repository，开启Github Pages后就能在<a href="https://whitelephantee.github.io/YujiaZhou/%E5%8F%91%E5%B8%83%EF%BC%8C">https://whitelephantee.github.io/YujiaZhou/发布，</a></p>
<p>一个特殊的Repository名是{username.github.io}，如果命名为这个的话Github就会自动合并。比如我（GitHub用户名是whitelephantee）把个人主页的Repository命名为whitelephantee.github.io的话，我的域名就不是<a href="https://whitelephantee.github.io/whitelephantee.github.io/%EF%BC%8C%E8%80%8C%E6%98%AFhttps://whitelephantee.github.io/%E3%80%82">https://whitelephantee.github.io/whitelephantee.github.io/，而是https://whitelephantee.github.io/。</a></p>
<p>新建完成之后就可以进行后续操作了。</p>
<h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p>
<p>安装成功后可以在terminal输入以下代码进行确认，如果返回版本号的话就安装成功啦。</p>
<pre><code>node -v
npm -v</code></pre>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>Hexo就是我们要用来搭建博客的平台。</p>
<p>注意一定要有sudo，我看网上的教程都没有sudo，但我实际操作中没有sudo就不行诶。</p>
<pre><code>sudo npm install -g hexo-cli</code></pre>
<p>如果命令一直停留在sill install loadAllDepsIntoIdealTree不动的话，使用阿里仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br></pre></td></tr></table></figure>



<h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>创建项目。</p>
<pre><code>hexo init &#123;name&#125;
cd &#123;name&#125;
npm install</code></pre>
<p>这里面的 {name} 就是我们想给这个个人主页起的名称，比如我就起了whitelephantee。</p>
<pre><code>hexo init whitelephantee
cd whitelephantee
npm install</code></pre>
<p>然后可以确认一下里面的文档。</p>
<pre><code>ls</code></pre>
<p>预览一下</p>
<pre><code>hexo s</code></pre>
<p>出现这个就说明成功了，可以在浏览器里输入<a href="http://localhost:4000看一下就可以，这是Hexo的默认界面，之后等连接上Github之后可以再修改。">http://localhost:4000看一下就可以，这是Hexo的默认界面，之后等连接上Github之后可以再修改。</a></p>
<pre><code> Hexo is running at http://localhost:4000 . Press Ctrl+C to stop</code></pre>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gifvhmss82j31c00u0e81.jpg" alt="截屏2020-09-05 下午4.51.13"></p>
<p>预览好之后就可以按ctrl+c结束预览，然后进入下一步。</p>
<h1 id="链接Github"><a href="#链接Github" class="headerlink" title="链接Github"></a>链接Github</h1><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>首先看一下自己本身有没有SSH Key，如果没有报错的话就说明有SSH Key。</p>
<pre><code>cd ~/.ssh</code></pre>
<p>有的话直接查看一下。</p>
<pre><code>cat ~/.ssh/id_rsa.pub</code></pre>
<p>就算有的话还要再确认一下并添加主机到本机SSH可信列表。如果返回Hi xxx! You are successfully authenticated, but Github does not provide shell access. 的话就对啦，如果显示Permission denied(public key)的话，则表明需要重新生成SSH Key。</p>
<pre><code>ssh -T git@github.com</code></pre>
<p>无论是没有还是需要重新生成都可以参考这个。</p>
<p><a href="https://docs.github.com/en/github/authenticating-to-github/error-permission-denied-publickey">Github Docs: Error: Permission denied (public key)</a> 里 <a href="https://docs.github.com/en/github/authenticating-to-github/error-permission-denied-publickey#make-sure-you-have-a-key-that-is-being-used">Make sure you have a key that is being used</a> 部分，并按照指示 <a href="https://docs.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account">新增SSH Key</a> 并 <a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">添加到Github中</a></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>打开_config.yml 文件</p>
<pre><code>cd &#123;name&#125;
open _config.yml</code></pre>
<p>找到 Deployment 这个地方，更改一下deploy这个地方，中间repo这个链接打开应该是Github里Respository的链接，修改完保存。</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/&#123;Repository Name&#125;/&#123;Project Name&#125;
  branch: master</code></pre>
<p>安装一个插件。</p>
<pre><code>npm install hexo-deployer-git --save</code></pre>
<p>之后进行部署，如果最后一行返回 INFO  Deploy done: git 就说明好啦。</p>
<pre><code>hexo g -d</code></pre>
<p>我们可以去 Github Pages 看一眼，比如我回到 <a href="https://whitelephantee.github.io/">https://whitelephantee.github.io/</a> 看一下就能够看到和原来在localhost上的预览界面一样的界面啦。</p>
<h1 id="部署网页"><a href="#部署网页" class="headerlink" title="部署网页"></a>部署网页</h1><p>虽然现在链接好了，但是个人网页里面的内容都还没有调整。</p>
<h2 id="更改基本信息"><a href="#更改基本信息" class="headerlink" title="更改基本信息"></a>更改基本信息</h2><p>继续打开_config.yml 文件</p>
<pre><code>open _config.yml</code></pre>
<p>找到 site 部分</p>
<pre><code>title: 小白象 #个人网页名称
subtitle: whitelephantee #副标题
description: 小白象的个人主页 想到什么写什么 #描述
keywords: #关键词
author: whitelephantee #作者
language: zh-CN #语言,默认的是en英语，我打算写中文的居多所以改成中文</code></pre>
<h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>Hexo 的主题就有很多，默认的是 landscape，其他得主题可以在 <a href="https://hexo.io/themes/">Hexo Theme</a> 里进行预览，找到心仪的之后下载下来，比如我下载了 next 主题。</p>
<pre><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre>
<p>在_config.yml 里找到 theme 部分，进行更改。</p>
<pre><code>theme: next</code></pre>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>进入主题的_config.yml 文件（注意不是 project 的 _config.yml 文件），按自己的喜好进行一下更改和调整，还是以我的为例。</p>
<pre><code>cd themes
cd next
open _config.yml</code></pre>
<p>Minify：自动删除不必要的文件</p>
<pre><code>minify: true</code></pre>
<p>footer - icon：在最下面作者和年份默认会有一个心形小图标，我想换成一个大象的图标。</p>
<pre><code>icon:
    # Icon name in Font Awesome. See: https://fontawesome.com/icons
    name: fa fa-elephant
    # If you want to animate the icon, set it to true.
    animated: false
    # Change the color of icon, using Hex Code.
    color: &quot;#000000&quot;</code></pre>
<p>scheme：next一共提供了4种样式，默认是Muse，我选择了Pisces。</p>
<pre><code>scheme: Pisces</code></pre>
<p>Menu: 默认的标签栏只有主页和归档页，但hexo还提供了一些备选项，包括标签页、分类页等，可以按需开启。</p>
<pre><code>menu:
  home: / || fa fa-home
  #about: /about/ || fa fa-user
  tags: /tags/ || fa fa-tags
  categories: /categories/ || fa fa-th
  archives: /archives/ || fa fa-archive
  schedule: /schedule/ || fa fa-calendar
  sitemap: /sitemap.xml || fa fa-sitemap
  #commonweal: /404/ || fa fa-heartbeat</code></pre>
<p>avatar：小头像，把目标图片文件放到 themes/next/source/images/avatar.JPG 路径，然后再在主题的_config.yml 文件中进行更改。</p>
<pre><code>avatar:
  # Replace the default image and set the url here.
  url: /images/avatar.JPG
  # If true, the avatar will be dispalyed in circle.
  rounded: true
  # If true, the avatar will be rotated with the cursor.
  rotated: false</code></pre>
<p>Pangu: 这是一个神器的选项，专门针对强迫症患者，在编译生成页面的时候，中英文之间就会自动添加空格。</p>
<pre><code>pangu: true</code></pre>
<h1 id="内容构建"><a href="#内容构建" class="headerlink" title="内容构建"></a>内容构建</h1><h2 id="更改第一篇内容"><a href="#更改第一篇内容" class="headerlink" title="更改第一篇内容"></a>更改第一篇内容</h2><p>预览的内容还算符合想法，但是主页的第一篇默认为 Hello World，想改成自己的内容。</p>
<p>首先打开/source/_posts/hello-world.md</p>
<pre><code>cd source/_posts
open hello-world.md</code></pre>
<p>然后进行编辑就好啦，hexo和github一样，默认的都是用Markdown语法写作，很简单的一学就会。</p>
<pre><code>---
title: #标题
---

# 一级标题
## 二级标题

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#代码块</span><br></pre></td></tr></table></figure>

[Name](Link) #链接</code></pre>
<h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>新建一篇文章的话还是在终端中。</p>
<pre><code>hexo new &#123;name&#125;</code></pre>
<p>然后就像上面更改一样进行写作就好啦，最上面写上时间、标题等。</p>
<pre><code>---
title: 标题 
date: 日期 # 自动创建，如 2019-08-22 11:47:21
tags: 
- 标签1
- 标签2
- 标签3
categories:
- 分类1
- 分类2
---</code></pre>
<h2 id="增加分类页"><a href="#增加分类页" class="headerlink" title="增加分类页"></a>增加分类页</h2><p>因为我不太喜欢标签的管理方式，所以我就只开了分类页，标签页的方式和分类页相似。</p>
<p>增加分类页面，会生成一个 source/categories/index.md 文件。</p>
<pre><code>hexo new page categories</code></pre>
<p>打开后在title下面增加两行。</p>
<pre><code>type: categories
comments: false</code></pre>
<p>然后在主题的 _config.yml 文件里，在menu里打开categories就可以啦。</p>
<pre><code>categories: /categories/ || th</code></pre>
<h2 id="增加搜索页"><a href="#增加搜索页" class="headerlink" title="增加搜索页"></a>增加搜索页</h2><p>增加一个网站内内容的搜索功能。</p>
<p>安装一个hexo-generator-searchdb插件。</p>
<pre><code>npm install hexo-generator-searchdb --save</code></pre>
<p>在项目的 _config.yml 文件里添加search选项。</p>
<pre><code>search:
  path: search.xml
  field: post
  format: html
  limit: 10000</code></pre>
<p>然后在主题的 _config.yml 里面也修改一下。</p>
<pre><code>local_search:
  enable: true
  # If auto, trigger search by changing input.
  # If manual, trigger search by pressing enter key or search button.
  trigger: auto
  # Show top n results per article, show all results by setting to -1
  top_n_per_article: 5
  # Unescape html strings to the readable one.
  unescape: false
  # Preload the search data when the page loads.
  preload: false</code></pre>
<h2 id="添加字数统计和阅读时长"><a href="#添加字数统计和阅读时长" class="headerlink" title="添加字数统计和阅读时长"></a>添加字数统计和阅读时长</h2><p>首先安装一个插件。</p>
<pre><code>npm install hexo-symbols-count-time --save</code></pre>
<p>在项目的 _config.yml 文件里添加。</p>
<pre><code>symbols_count_time:
  symbols: true
  time: true
  total_symbols: true
  total_time: true
  exclude_codeblock: false
  awl: 4
  wpm: 300
  suffix: &quot;mins.&quot;</code></pre>
<p>然后在主题的 _config.yml 里面也修改一下。</p>
<pre><code>symbols_count_time:
  separated_meta: true
  item_text_post: true
  item_text_total: false</code></pre>
<h2 id="增加动态背景"><a href="#增加动态背景" class="headerlink" title="增加动态背景"></a>增加动态背景</h2><p>切换到Next主题文件夹</p>
<pre><code>cd themes/next</code></pre>
<p>安装模块</p>
<pre><code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></pre>
<p>修改主题的 _config.yml </p>
<pre><code># Canvas-nest
# Dependencies: https://github.com/theme-next/theme-next-canvas-nest
canvas_nest:
  enable: true
  onmobile: true # 是否在手机上显示
  color: &quot;255,51,51&quot; # RGB颜色设置
  opacity: 0.5 # 线条透明度
  zIndex: -1 # 显示级别
  count: 160 # 线条的数量，越多越卡</code></pre>
<h1 id="Final-Touch"><a href="#Final-Touch" class="headerlink" title="Final Touch"></a>Final Touch</h1><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>设置了那么多，效果如何呢？让我们先在本地预览一下。</p>
<pre><code>hexo s</code></pre>
<h2 id="更新Github-Page"><a href="#更新Github-Page" class="headerlink" title="更新Github Page"></a>更新Github Page</h2><p>可以直接在终端中运行。</p>
<pre><code>hexo clean
hexo generate
hexo deploy</code></pre>
<p>为了方便，我直接创建了一个脚本文件，这样以后每次更新就只用输入一行就可以了。</p>
<p>创建创建脚本文件。</p>
<pre><code>touch deploy.sh
chmod 755 deploy.sh
./deploy.sh</code></pre>
<p>将文本打开并写入内容，然后执行。</p>
<pre><code>sh deploy.sh</code></pre>
<p>这样一个个人网页就算基本搭建好啦。</p>
<p>参考文档：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000017986794">超详细Hexo+Github博客搭建技术</a></li>
<li><a href="https://www.cxyxiaowu.com/6407.html">超全面！如何用 GitHub 从零开始搭建一个博客 ？</a></li>
</ul>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mac访达Finder中文件绝对路径怎么找</title>
    <url>/2020/09/07/mac-path/</url>
    <content><![CDATA[<p>最方便快捷的方式就是直接点击想知道路径的文件，然后按 option-command-c 就能自动复制到剪贴板啦，超easy！</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>mac一些有用的快捷键（随时更新）</title>
    <url>/2020/09/08/mac-shortcut/</url>
    <content><![CDATA[<p>command+i | 访达 | 显示简介<br>command+shift+c | 访达 ｜ 复制路径</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在notion里快速跳转到顶部/目录？</title>
    <url>/2021/10/08/notion-backToTop/</url>
    <content><![CDATA[<p>由于notion里目录不能悬浮，所以大家各显神通解决这一问题。我搜了半天，觉得比较靠谱的有两种方法。</p>
<p>第一种，手动将目录放到左侧，适用于内容不太多的文档。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv6um35my2g60s50lb4ey02.gif"></p>
<p>第二种，将目录/最开头的内容 copy link然后做一个跳转的button</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv6umgu5w7g60s50lbdyw02.gif"></p>
<p>Reference：</p>
<ul>
<li><a href="https://www.redgregory.com/notion/2020/7/19/how-to-create-a-back-to-top-button-in-notion">Red Gregory</a></li>
<li><a href="https://www.notion.so/Notion-b01de9e8f01d462093e369e4a407a511">Notion笔记</a></li>
</ul>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>notion</tag>
      </tags>
  </entry>
  <entry>
    <title>mac pip 用法</title>
    <url>/2020/10/19/mac-pip/</url>
    <content><![CDATA[<p>mac系统更新后，pip以前的命令似乎都不能用了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line"> File <span class="string">&quot;/usr/local/bin/pip&quot;</span>, line 6, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"></span><br><span class="line">  from pip._internal.cli.main import main</span><br><span class="line"></span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;pip._internal.cli.main&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我查阅了资料后发现，现在pip在mac上的用法更改了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install requests</span><br></pre></td></tr></table></figure>

<p>这样就可以啦！</p>
<p>然后pip更新的话是——</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;opt&#x2F;python&#x2F;bin&#x2F;python3.7 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>附上更多用法清单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage:   </span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/python/bin/python3.7 -m pip &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  install                     Install packages.</span><br><span class="line">  download                    Download packages.</span><br><span class="line">  uninstall                   Uninstall packages.</span><br><span class="line">  freeze                      Output installed packages <span class="keyword">in</span> requirements format.</span><br><span class="line">  list                        List installed packages.</span><br><span class="line">  show                        Show information about installed packages.</span><br><span class="line">  check                       Verify installed packages have compatible dependencies.</span><br><span class="line">  config                      Manage <span class="built_in">local</span> and global configuration.</span><br><span class="line">  search                      Search PyPI <span class="keyword">for</span> packages.</span><br><span class="line">  cache                       Inspect and manage pip<span class="string">&#x27;s wheel cache.</span></span><br><span class="line"><span class="string">  wheel                       Build wheels from your requirements.</span></span><br><span class="line"><span class="string">  hash                        Compute hashes of package archives.</span></span><br><span class="line"><span class="string">  completion                  A helper command used for command completion.</span></span><br><span class="line"><span class="string">  debug                       Show information useful for debugging.</span></span><br><span class="line"><span class="string">  help                        Show help for commands.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">General Options:</span></span><br><span class="line"><span class="string">  -h, --help                  Show help.</span></span><br><span class="line"><span class="string">  --isolated                  Run pip in an isolated mode, ignoring environment variables and user configuration.</span></span><br><span class="line"><span class="string">  -v, --verbose               Give more output. Option is additive, and can be used up to 3 times.</span></span><br><span class="line"><span class="string">  -V, --version               Show version and exit.</span></span><br><span class="line"><span class="string">  -q, --quiet                 Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and CRITICAL logging levels).</span></span><br><span class="line"><span class="string">  --log &lt;path&gt;                Path to a verbose appending log.</span></span><br><span class="line"><span class="string">  --proxy &lt;proxy&gt;             Specify a proxy in the form [user:passwd@]proxy.server:port.</span></span><br><span class="line"><span class="string">  --retries &lt;retries&gt;         Maximum number of retries each connection should attempt (default 5 times).</span></span><br><span class="line"><span class="string">  --timeout &lt;sec&gt;             Set the socket timeout (default 15 seconds).</span></span><br><span class="line"><span class="string">  --exists-action &lt;action&gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.</span></span><br><span class="line"><span class="string">  --trusted-host &lt;hostname&gt;   Mark this host or host:port pair as trusted, even though it does not have valid or any HTTPS.</span></span><br><span class="line"><span class="string">  --cert &lt;path&gt;               Path to alternate CA bundle.</span></span><br><span class="line"><span class="string">  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file containing the private key and the certificate in PEM format.</span></span><br><span class="line"><span class="string">  --cache-dir &lt;dir&gt;           Store the cache data in &lt;dir&gt;.</span></span><br><span class="line"><span class="string">  --no-cache-dir              Disable the cache.</span></span><br><span class="line"><span class="string">  --disable-pip-version-check</span></span><br><span class="line"><span class="string">                              Don&#x27;</span>t periodically check PyPI to determine whether a new version of pip is available <span class="keyword">for</span> download. Implied with --no-index.</span><br><span class="line">  --no-color                  Suppress colored output</span><br><span class="line">  --no-python-version-warning</span><br><span class="line">                              Silence deprecation warnings <span class="keyword">for</span> upcoming unsupported Pythons.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 numbers 单元格内换行？</title>
    <url>/2020/09/07/numbers-return/</url>
    <content><![CDATA[<p>通常我们都习惯在写文本的时候按回车（Enter）换行，但在numbers里，按了回车是会自动跳到下一格的，那么如何解决这个问题？</p>
<p>用 <strong>option+Enter</strong> 就行啦！</p>
<hr>
<h2 id="Example小栗子："><a href="#Example小栗子：" class="headerlink" title="Example小栗子："></a>Example小栗子：</h2><p>现在我有文本如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiajmqwqnj30xc0c1aad.jpg" alt="9808904-94c37e422ac7dfe1."></p>
<p>可我不想说自己傻，所以想获得酱紫的效果：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiajuhojoj30xc07bq30.jpg" alt="9808904-49be64714c4f3411."></p>
<p>于是我按option+Enter:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiajzbr1fg30pb0kcgmm.gif" alt="9808904-a9435cc4ed1b7815"></p>
<p>Perfect！</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
        <tag>numbers</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 pages 里快速复制格式/格式刷？</title>
    <url>/2020/09/07/pages-formatting/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>快捷键：</p>
<ul>
<li><p>opt+command+c 复制格式</p>
</li>
<li><p>opt+command+v 粘贴格式</p>
</li>
</ul>
<p>常规方法：</p>
<ul>
<li>pages标签栏-格式-拷贝样式/粘贴样式</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiao3q6cvj30ti0m40tz.jpg" alt="9808904-778c5800c618cf4c"></p>
<h1 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h1><p>1.0版：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiaoc2qskg30sf0kbwhv.gif" alt="9808904-d6799f3140157c59"></p>
<p>2.0版<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giiaovee63g30sf0kbabl.gif" alt="9808904-4812c80c61f8814c"></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
        <tag>pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Pages如何快速无格式粘贴粘贴</title>
    <url>/2020/09/07/pages-paste/</url>
    <content><![CDATA[<p>很多时候我们复制的文本都是带有格式的 可我们又不需要 粘贴过来再要改又好麻烦 那怎么破呢？</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li><p>标签栏-编辑-粘贴并匹配样式</p>
</li>
<li><p>快捷键：shift+option+command+v</p>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicesxtguj30xc0hqgmy.jpg" alt="9808904-d0bc2014ff4d9869"></p>
<h1 id="小栗子"><a href="#小栗子" class="headerlink" title="小栗子"></a>小栗子</h1><p>1.0版：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicfqj6ljg30s90kcwht.gif" alt="9808904-c940fa8e6cf85b3d"></p>
<p>2.0版：<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicftx0p8g30s90kcta8.gif" alt="9808904-d0d98444cda8b3a1"></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
        <tag>pages</tag>
      </tags>
  </entry>
  <entry>
    <title>python小菜鸟备忘录：用python读取/写入excel</title>
    <url>/2021/06/03/python%20-%20excel/</url>
    <content><![CDATA[<p>最近要做数据分析，总要跟excel打交道，我好懒，于是打算用python搞搞excel</p>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>使用的库是xlrd，基本操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">with</span> xlrd.open_workbook(<span class="string">&#x27;x.xlsx&#x27;</span>) <span class="keyword">as</span> workbook: <span class="comment">#打开文档</span></span><br><span class="line">    worksheet=workbook.sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>) <span class="comment">#读取工作表</span></span><br><span class="line">    <span class="keyword">for</span> row_index <span class="keyword">in</span> range(worksheet.nrows): <span class="comment">#对于每一行</span></span><br><span class="line">        content = worksheet.cell_value(row_index, <span class="number">0</span>) <span class="comment">#获取某个格的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者另外一种方法读取excel</span></span><br><span class="line">data_excel=xlrd.open_workbook(<span class="string">&#x27;data/dataset.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有sheet名称</span></span><br><span class="line">names=data_excel.sheet_names()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取book中的sheet工作表的三种方法,返回一个xlrd.sheet.Sheet()对象</span></span><br><span class="line">table=data_excel.sheets()[<span class="number">0</span>]  <span class="comment"># 通过索引顺序获取sheet</span></span><br><span class="line">table=data_excel.sheet_by_index(sheetx=<span class="number">0</span>) <span class="comment"># 通过索引顺序获取sheet</span></span><br><span class="line">table=data_excel.sheet_by_name(sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>) <span class="comment"># 通过名称获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># excel工作表的行列操作</span></span><br><span class="line">n_rows=table.nrows  <span class="comment"># 获取该sheet中的有效行数</span></span><br><span class="line">n_cols=table.ncols  <span class="comment"># 获取该sheet中的有效列数</span></span><br><span class="line">row_list=table.row(rowx=<span class="number">0</span>)  <span class="comment"># 返回某行中所有的单元格对象组成的列表</span></span><br><span class="line">cols_list=table.col(colx=<span class="number">0</span>) <span class="comment"># 返回某列中所有的单元格对象组成的列表</span></span><br><span class="line">content_list = worksheet.row_values(<span class="number">0</span>) <span class="comment">#获取某行中所有的单元格内容组成的列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回某行中所有单元格的数据组成的列表</span></span><br><span class="line">row_data=table.row_values(<span class="number">0</span>,start_colx=<span class="number">0</span>,end_colx=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回某列中所有单元格的数据组成的列表</span></span><br><span class="line">cols_data=table.col_values(<span class="number">0</span>,start_rowx=<span class="number">0</span>,end_rowx=<span class="literal">None</span>)</span><br><span class="line">row_lenth=table.row_len(<span class="number">0</span>)  <span class="comment"># 返回某行的有效单元格长度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><p>写入的库是 xlwt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建一个workbook 设置编码</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个worksheet</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字体样式设置</span></span><br><span class="line">style = xlwt.XFStyle()  <span class="comment"># 初始化样式</span></span><br><span class="line">font = xlwt.Font()  <span class="comment"># 为样式创建字体</span></span><br><span class="line">font.name = <span class="string">&#x27;Times New Roman&#x27;</span></span><br><span class="line">font.height = <span class="number">20</span> * <span class="number">11</span>  <span class="comment"># 字体大小，11为字号，20为衡量单位</span></span><br><span class="line">font.bold = <span class="literal">True</span>  <span class="comment"># 黑体</span></span><br><span class="line">font.underline = <span class="literal">True</span>  <span class="comment"># 下划线</span></span><br><span class="line">font.italic = <span class="literal">True</span>  <span class="comment"># 斜体字</span></span><br><span class="line">style.font = font  <span class="comment"># 设定样式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据写入excel,参数对应 行, 列, 值</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;test_data&#x27;</span>)  <span class="comment"># 不带样式的写入</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;test_data&#x27;</span>, style)  <span class="comment"># 带字体样式的写入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置单元格宽度</span></span><br><span class="line">worksheet.col(<span class="number">0</span>).width = <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置单元格背景颜色</span></span><br><span class="line">pattern = xlwt.Pattern()</span><br><span class="line">pattern.pattern = xlwt.Pattern.SOLID_PATTERN</span><br><span class="line">pattern.pattern_fore_colour = <span class="number">13</span></span><br><span class="line">style = xlwt.XFStyle()  <span class="comment"># Create the Pattern</span></span><br><span class="line">style.pattern = pattern  <span class="comment"># Add Pattern to Style</span></span><br><span class="line">worksheet.write(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;colour&#x27;</span>, style)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给单元格添加边框方法一</span></span><br><span class="line">borders = xlwt.Borders()  <span class="comment"># Create Borders</span></span><br><span class="line">borders.left = xlwt.Borders.DASHED   <span class="comment">#DASHED虚线，NO_LINE没有，THIN实线</span></span><br><span class="line">borders.right = xlwt.Borders.DASHED  <span class="comment">#borders.right=1 表示实线</span></span><br><span class="line">borders.top = xlwt.Borders.DASHED</span><br><span class="line">borders.bottom = xlwt.Borders.DASHED</span><br><span class="line">borders.left_colour=<span class="number">0x40</span></span><br><span class="line">borders.right_colour = <span class="number">0x40</span></span><br><span class="line">borders.top_colour = <span class="number">0x40</span></span><br><span class="line">borders.bottom_colour = <span class="number">0x40</span></span><br><span class="line">style = xlwt.XFStyle()  <span class="comment"># Create Style</span></span><br><span class="line">style.borders = borders  <span class="comment"># Add Borders to Style</span></span><br><span class="line">worksheet.write(<span class="number">3</span>,<span class="number">0</span> , <span class="string">&#x27;border1&#x27;</span>, style)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给单元格添加边框方法二</span></span><br><span class="line"><span class="comment"># 细实线:1，小粗实线:2，细虚线:3，中细虚线:4，大粗实线:5，双线:6，细点虚线:7，大粗虚线:8，细点划线:9，粗点划线:10，细双点划线:11，粗双点划线:12，斜点划线:13</span></span><br><span class="line">borders = xlwt.Borders()</span><br><span class="line">borders.left = <span class="number">1</span>    <span class="comment">#设置为细实线</span></span><br><span class="line">borders.right = <span class="number">1</span></span><br><span class="line">borders.top = <span class="number">1</span></span><br><span class="line">borders.bottom = <span class="number">1</span></span><br><span class="line">borders.left_colour = <span class="number">2</span>  <span class="comment">#颜色设置为红色</span></span><br><span class="line">borders.right_colour = <span class="number">2</span></span><br><span class="line">borders.top_colour = <span class="number">2</span></span><br><span class="line">borders.bottom_colour = <span class="number">2</span></span><br><span class="line">style = xlwt.XFStyle()  <span class="comment"># Create Style</span></span><br><span class="line">style.borders = borders  <span class="comment"># Add Borders to Style</span></span><br><span class="line">worksheet.write(<span class="number">4</span>, <span class="number">0</span>, <span class="string">&#x27;border2&#x27;</span>, style)</span><br><span class="line"></span><br><span class="line"><span class="comment">#单元格添加计算公式</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># Outputs 2</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># Outputs 3</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">1</span>, xlwt.Formula(<span class="string">&#x27;B1*C1&#x27;</span>))  <span class="comment"># Should output &quot;6&quot; (B1[2] * B2[6])</span></span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">2</span>, xlwt.Formula(<span class="string">&#x27;SUM(B1,C1)&#x27;</span>))  <span class="comment"># Should output &quot;5&quot; (B1[2] + C1[3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#向单元格添加一个超链接</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">3</span>, xlwt.Formula(<span class="string">&#x27;HYPERLINK(&quot;http://www.baidu.com&quot;;&quot;baidu&quot;)&#x27;</span>))  <span class="comment"># Outputs the text &quot;baidu&quot; linking to http://www.baidu.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单元格合并</span></span><br><span class="line">worksheet.write_merge(<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;First Merge&#x27;</span>)   <span class="comment">#合并0行的4到5列</span></span><br><span class="line">worksheet.write_merge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&#x27;Second Merge&#x27;</span>)  <span class="comment">#合并1和2行的4到5列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置单元格内容的对其方式</span></span><br><span class="line">alignment=xlwt.Alignment()  <span class="comment">## Create Alignment</span></span><br><span class="line">alignment.horz=xlwt.Alignment.HORZ_CENTER</span><br><span class="line">alignment.vert=xlwt.Alignment.VERT_CENTER</span><br><span class="line">style=xlwt.XFStyle()</span><br><span class="line">style.alignment=alignment   <span class="comment"># Add Alignment to Style</span></span><br><span class="line">worksheet.write(<span class="number">0</span>, <span class="number">6</span>, <span class="string">&#x27;alignment&#x27;</span>, style)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文件</span></span><br><span class="line">workbook.save(<span class="string">&#x27;data_test.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/asialee_bird/article/details/105497121">Python3读取和写入excel表格数据</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python小菜鸟备忘录：怎么读取/写入文档</title>
    <url>/2021/01/24/python%20-%20file/</url>
    <content><![CDATA[<p>总是忘记怎么读取/写入文档……然后发现原先写在jupyter的所有python和R的笔记都没了……所以痛定思痛，还是自己写在自己博客上靠谱呜呜</p>
<hr>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(file, mode=<span class="string">&#x27;r&#x27;</span>) <span class="comment">#file为文件路径（绝对/相对）</span></span><br></pre></td></tr></table></figure>

<p>这是最基本的读取文件方式，其他的变形为：</p>
<ul>
<li>encoding = none 为默认，其他常用的为utf8</li>
<li>mode一共有好几种，这里列几种常用的</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>要打开文件就一定要相对应的关闭文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>读取文件首先模式要选对，其次是不同的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.read([size]) <span class="comment">#返回size数量的字节数 如果未给定或为负则读取所有。</span></span><br><span class="line">f.readline() <span class="comment">#读取整行，包括 &quot;\n&quot; 字符。如果不想要\n的话可以f.readline().strip()</span></span><br><span class="line">f.readlines() <span class="comment">#读取所有行,返回包含所有行以及\n的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#note：返回的都是string</span></span><br><span class="line">string = f.read()</span><br></pre></td></tr></table></figure>

<p>常用的是readlines()，即依次读取每行信息（且不返还列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():   <span class="comment">#依次读取每行  </span></span><br><span class="line">    line = line.strip()       <span class="comment">#去掉每行头尾空白  </span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;读取的数据为: %s&quot;</span> % (line)</span><br></pre></td></tr></table></figure>

<h2 id="设置指针位置"><a href="#设置指针位置" class="headerlink" title="设置指针位置"></a>设置指针位置</h2><p>一般打开文件默认指针在开头或结尾，如果想到其他位置可以设置指针。</p>
<p>语法为：fileObject.seek(offset[, whence])</p>
<ul>
<li>offset: 开始的偏移量，也就是代表需要移动偏移的字节数</li>
<li>whence：可选，默认值为 0。给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</li>
</ul>
<p>如果操作成功，则返回新的文件位置，如果操作失败，则函数返回 -1。</p>
<p>一些常用的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment">#重新设置文件读取指针到开头</span></span><br><span class="line">f.seek(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">#重新设置文件读取指针到末尾</span></span><br><span class="line">f.tell() <span class="comment">#返回文件当前位置</span></span><br></pre></td></tr></table></figure>

<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f.write(str) #写入字符串</span><br><span class="line">f.writelines([list of strings]) #写入多行字符串，但是如需换行需要自己加换行符</span><br><span class="line"></span><br><span class="line">#栗子</span><br><span class="line">seq &#x3D; [&quot;test 1\n&quot;, &quot;test 2&quot;]</span><br><span class="line">f.writelines(seq)</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.name <span class="comment">#返回文件名</span></span><br><span class="line">f.truncate([size]) <span class="comment">#截断文件</span></span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.runoob.com/python/file-methods.html">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用python制作anki卡组</title>
    <url>/2021/05/23/python%20-%20ankimaker/</url>
    <content><![CDATA[<p>目标是读取pdf做anki卡组，记录一下鼓捣了一晚上的结果。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>pdf必须是文字版 扫描版目前的识别率还是太低 即使是用FineReader也还是得手动调整 工作量太大</p>
<h2 id="pdf转word"><a href="#pdf转word" class="headerlink" title="pdf转word"></a>pdf转word</h2><p>因为word读取比较方便（可能只是因为我菜） 所以我先用 adobe acrobat 将pdf转成word</p>
<h2 id="word转anki"><a href="#word转anki" class="headerlink" title="word转anki"></a>word转anki</h2><p>目标就是 读取正面内容 加tab 然后加背面内容 然后加回车<br>也正因为如此，背面如此是不能用回车换行的 如果需要换行就加 br 然后anki里勾选允许使用html</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件路径</span></span><br><span class="line">path = <span class="string">&quot;test.docx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件对象</span></span><br><span class="line">file = docx.Document(path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入文档</span></span><br><span class="line">outfile = open(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#count</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    content = line.text <span class="comment">#读取内容</span></span><br><span class="line">    <span class="keyword">if</span> len(content) &gt; <span class="number">1</span>: <span class="comment">#空行或标题行（比如A）不要</span></span><br><span class="line">        <span class="keyword">if</span> str(line.runs[<span class="number">0</span>].font.color.rgb) == <span class="string">&#x27;0000FF&#x27;</span>: <span class="comment">#蓝色字是正面</span></span><br><span class="line">            wordlist = content.split( )</span><br><span class="line">            outfile.write(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">#背面加回车（不过这样的问题是第一行也是空的 要输出后手动删去 不然放进anki会出错）</span></span><br><span class="line">            outfile.write(wordlist[<span class="number">0</span>]+<span class="string">&#x27;\t&#x27;</span>) <span class="comment">#正面+tab</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> otherword <span class="keyword">in</span> wordlist[<span class="number">1</span>:]:</span><br><span class="line">                <span class="keyword">if</span> len(otherword) &gt; <span class="number">5</span>:</span><br><span class="line">                    outfile.write(otherword+<span class="string">&#x27;&lt;br&gt;&#x27;</span>) <span class="comment">#背面写入 +换行 为了美观</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    outfile.write(otherword) <span class="comment">#背面不换行写入</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            outfile.write(content + <span class="string">&#x27;&lt;br&gt;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            print(str(i)+<span class="string">&#x27; words completed&#x27;</span>)</span><br><span class="line"></span><br><span class="line">outfile.close()</span><br></pre></td></tr></table></figure>
<h2 id="导入anki"><a href="#导入anki" class="headerlink" title="导入anki"></a>导入anki</h2><p>打开anki 导入输出的txt 选择html 看一下设置 就行啦<br><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqs9mwt8d0j30uy0rktcb.jpg"></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>anki</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Academia 配置</title>
    <url>/2020/09/07/hexo-academia/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><p>一个已经搭建在Github Pages上的Hexo网站</p>
<p>如果没有的话可以按照<a href="https://whitelephantee.github.io/2020/09/05/hexo-building/">这个链接</a>里进行搭建。</p>
</li>
<li><p>git 和 npm</p>
</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PhosphorW/hexo-theme-academia.git themes/Academia</span><br></pre></td></tr></table></figure>

<p>下载需要的插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure>

<p>在项目的 _config.yml 中找到 theme 一栏并进行更改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure>

<p>##主题配置</p>
<p>打开 themes 的 _config.yml（注意不是 hexo project 的 _config.yml ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open _config.yml</span><br></pre></td></tr></table></figure>

<p>个人信息配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">author: <span class="comment">#个人姓名</span></span><br><span class="line">author_bio: <span class="comment">#个人简介</span></span><br><span class="line">avatar: /img/avatar.jpg <span class="comment">#个人头像 默认是小灰人 可以通过在/themes/Academia/source/img/avatar.jpg 替换添加</span></span><br><span class="line"><span class="comment"># if author sets in hexo_config, this string doesn&#x27;t work</span></span><br></pre></td></tr></table></figure>

<p>顶部菜单栏设置，默认提供 Publications，About 和 Blog，可以页内跳转也可以添加外链</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Publications: /<span class="comment">#Publications #页内跳转</span></span><br><span class="line">  About: /</span><br><span class="line">  Blog: https://phower.me <span class="comment">#添加外链</span></span><br></pre></td></tr></table></figure>

<p>添加社交信息，附带小图标，不需要的或不想展示的可以注释掉，或者直接关掉。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#不想展示可以关掉</span></span><br><span class="line">social_links:</span><br><span class="line">  fab fa-twitter: /</span><br><span class="line">  fab fa-facebook-square: /</span><br><span class="line">  fab fa-github: /</span><br><span class="line">  fab fa-stack-overflow: /</span><br><span class="line">  fab fa-linkedin: /</span><br><span class="line">  fab fa-weibo: /</span><br><span class="line">  fab fa-weixin: /</span><br><span class="line">  fab fa-qq: /</span><br><span class="line">  fas fa-envelope: / <span class="comment">#E-mail</span></span><br><span class="line">  fas fa-rss: /  <span class="comment">#rss</span></span><br><span class="line">  </span><br><span class="line">e_social:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#额外社交链接</span></span><br><span class="line">e_social_links:</span><br><span class="line">  Google Scholar: / || fas fa-graduation-cap</span><br><span class="line">  ORCID: / || fab fa-orcid</span><br></pre></td></tr></table></figure>

<p>可以添加个人简历，可以通过在/themes/Academia/source/attaches/CV.pdf 替换添加。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cv_dl:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  dir: /attaches/CV.pdf</span><br><span class="line">  description: My Detail CV.</span><br></pre></td></tr></table></figure>

<h1 id="编辑主页"><a href="#编辑主页" class="headerlink" title="编辑主页"></a>编辑主页</h1><p>新建文章。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n post <span class="string">&quot;any title&quot;</span></span><br></pre></td></tr></table></figure>

<p>去到 hexo project 的/source/_posts 中就能找到名称相同的 markdown 文档，里面有几行内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Public <span class="comment">#标题</span></span><br><span class="line">date: 2020-09-07 15:45:51 <span class="comment">#创建日期</span></span><br><span class="line">tags: <span class="comment">#标签 在 Academia 风格下不提供标签 所以无效</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>在文首加上 academia: true，才会被 academia 显示出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Public <span class="comment">#标题</span></span><br><span class="line">date: 2020-09-07 15:45:51 <span class="comment">#创建日期</span></span><br><span class="line">tags: <span class="comment">#标签 在 Academia 风格下不提供标签 所以无效</span></span><br><span class="line">academia: <span class="literal">true</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后就可以在上面写想写的内容啦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Public <span class="comment">#标题</span></span><br><span class="line">date: 2020-09-07 15:45:51 <span class="comment">#创建日期</span></span><br><span class="line">tags: <span class="comment">#标签 在 Academia 风格下不提供标签 所以无效</span></span><br><span class="line">academia: <span class="literal">true</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">在这里用 markdown 语法写任意想写的内容。</span><br></pre></td></tr></table></figure>

<h1 id="编辑其他页"><a href="#编辑其他页" class="headerlink" title="编辑其他页"></a>编辑其他页</h1><p>我这里以 Publications 页为例。现在只在标题栏中有  Publications，但是实际后段文档中并没有，所以我们需要先添加一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n post <span class="string">&quot;Publications&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>然后系统就会在/source 里新增一个同名文件夹，同时文件夹里有一个 index.md. 直接打开然后和之前一样编辑就好啦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="built_in">source</span>/Publications</span><br><span class="line">open index.md</span><br></pre></td></tr></table></figure>

<p>编辑完成之后要在 Academia 的  _config.yml 文件中链接一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  Publications: /Publications</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python小菜鸟备忘录：怎么多行注释</title>
    <url>/2021/02/12/python%20-%20notation/</url>
    <content><![CDATA[<p>总是忘记怎么多行注释，每次都要谷歌一下，还是记在这里更靠谱一些！</p>
<hr>
<p>一次性多行注释：cmd+/</p>
<p>不要再忘啦喂！</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python小菜鸟备忘录：用python写入word</title>
    <url>/2021/02/13/python%20-%20wordwrite/</url>
    <content><![CDATA[<p>我又突发奇想，想直接用python写入word，嘻嘻。</p>
<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>好像brew安不了，只能用 pip。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install python-docx</span><br></pre></td></tr></table></figure>

<h2 id="新建与保存"><a href="#新建与保存" class="headerlink" title="新建与保存"></a>新建与保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docx </span><br><span class="line"></span><br><span class="line">doc = docx.Document() <span class="comment">#新建文档</span></span><br><span class="line">...</span><br><span class="line">doc.save(<span class="string">&#x27;xxx.docx&#x27;</span>) <span class="comment">#保存文档</span></span><br></pre></td></tr></table></figure>

<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><h3 id="写入一段话（Paragraph）"><a href="#写入一段话（Paragraph）" class="headerlink" title="写入一段话（Paragraph）"></a>写入一段话（Paragraph）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paragraph = document.add_paragraph(<span class="string">&#x27;Lorem ipsum dolor sit amet.&#x27;</span>) <span class="comment">#写入</span></span><br><span class="line">prior_paragraph = paragraph.insert_paragraph_before(<span class="string">&#x27;Lorem ipsum&#x27;</span>) <span class="comment">#在paragraph这段话之前插入一段话</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调整整体格式</span></span><br><span class="line">document.add_paragraph(<span class="string">&#x27;Lorem ipsum dolor sit amet.&#x27;</span>, style=<span class="string">&#x27;ListBullet&#x27;</span>) <span class="comment">#有序列表 style名称和word一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调整整体格式方法2</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">&#x27;Lorem ipsum dolor sit amet.&#x27;</span>)</span><br><span class="line">paragraph.style = <span class="string">&#x27;List Bullet&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加缩进</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Inches</span><br><span class="line">paragraph = document.add_paragraph(<span class="string">&#x27;Lorem ipsum dolor sit amet.&#x27;</span>)</span><br><span class="line">paragraph_format = paragraph.paragraph_format</span><br><span class="line">paragraph_format.left_indent = Inches(<span class="number">0.5</span>) <span class="comment">#这个是缩进数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#右边缩进</span></span><br><span class="line">paragraph_format.right_indent = Pt(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#首行缩进</span></span><br><span class="line">paragraph_format.first_line_indent = Inches(<span class="number">-0.25</span>) <span class="comment">#正号是缩进 负值则是第一行冒出去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置字体</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Pt</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> RGBColor</span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn</span><br><span class="line"></span><br><span class="line">pa = paragraphs[<span class="number">10</span>].add_run(<span class="string">&quot;XXX&quot;</span>) <span class="comment">#设置run</span></span><br><span class="line">pa.font.size = Pt(<span class="number">10</span>) <span class="comment">#设置字号</span></span><br><span class="line">pa.font.bold = <span class="literal">True</span> <span class="comment">#设置粗体</span></span><br><span class="line">pa.font.color.rgb = RGBColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">#设置颜色</span></span><br><span class="line">pa.font.name = <span class="string">&quot;Times New Roman&quot;</span> <span class="comment">#设置英文字体 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置中文字体</span></span><br><span class="line">pa.font.name = <span class="string">u&#x27;微软雅黑&#x27;</span></span><br><span class="line">pa._element.rPr.rFonts.set(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">u&#x27;微软雅黑&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>添加标题（headings)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.add_heading(<span class="string">&#x27;The REAL meaning of the universe&#x27;</span>) <span class="comment">#添加一级标题（在word里对应‘Heading 1’</span></span><br><span class="line">document.add_heading(<span class="string">&#x27;The role of dolphins&#x27;</span>, level=<span class="number">2</span>) <span class="comment">#添加小标题，可以包括1-9</span></span><br><span class="line">document.add_heading(<span class="string">&#x27;The role of dolphins&#x27;</span>, level=<span class="number">0</span>) <span class="comment">#添加title</span></span><br></pre></td></tr></table></figure>

<h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = document.add_table(rows=<span class="number">2</span>, cols=<span class="number">2</span>) <span class="comment">#插入表格</span></span><br><span class="line">cell = table.cell(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">#按照行-列access每个cell，注意从0开始计数</span></span><br><span class="line">cell.text = <span class="string">&#x27;parrot, possibly dead&#x27;</span> <span class="comment">#写入cell</span></span><br><span class="line"></span><br><span class="line">row1 = table.rows[<span class="number">1</span>] <span class="comment">#第2行，每个table可以.rows，每个row可以.cells</span></span><br><span class="line">row.cells[<span class="number">0</span>].text = <span class="string">&#x27;Foo bar to you.&#x27;</span> <span class="comment">#第2行第一列</span></span><br><span class="line">row.cells[<span class="number">1</span>].text = <span class="string">&#x27;And a hearty foo bar to you too sir!&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历每一个cell</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> table.rows:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row.cells:</span><br><span class="line">        print(cell.text)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#添加行</span></span><br><span class="line">row = table.add_row()</span><br><span class="line"></span><br><span class="line"><span class="comment">#get行数和列数</span></span><br><span class="line">row_count = len(table.rows)</span><br><span class="line">col_count = len(table.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用word内置的表格style，只要在word里找到想要的style，把空格去掉再写到这里就可以了</span></span><br><span class="line">table.style = <span class="string">&#x27;LightShading-Accent1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量写入栗子</span></span><br><span class="line"><span class="comment"># get table data -------------</span></span><br><span class="line">items = (</span><br><span class="line">    (<span class="number">7</span>, <span class="string">&#x27;1024&#x27;</span>, <span class="string">&#x27;Plush kittens&#x27;</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;2042&#x27;</span>, <span class="string">&#x27;Furbees&#x27;</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;1288&#x27;</span>, <span class="string">&#x27;French Poodle Collars, Deluxe&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add table ------------------</span></span><br><span class="line">table = document.add_table(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># populate header row --------</span></span><br><span class="line">heading_cells = table.rows[<span class="number">0</span>].cells</span><br><span class="line">heading_cells[<span class="number">0</span>].text = <span class="string">&#x27;Qty&#x27;</span></span><br><span class="line">heading_cells[<span class="number">1</span>].text = <span class="string">&#x27;SKU&#x27;</span></span><br><span class="line">heading_cells[<span class="number">2</span>].text = <span class="string">&#x27;Description&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add a data row for each item</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    cells = table.add_row().cells</span><br><span class="line">    cells[<span class="number">0</span>].text = str(item.qty)</span><br><span class="line">    cells[<span class="number">1</span>].text = item.sku</span><br><span class="line">    cells[<span class="number">2</span>].text = item.desc</span><br><span class="line">    </span><br><span class="line"><span class="comment">#设置表格属性</span></span><br><span class="line"><span class="keyword">from</span> docx.enum.text <span class="keyword">import</span> WD_ALIGN_PARAGRAPH</span><br><span class="line"><span class="keyword">from</span> docx.enum.table <span class="keyword">import</span> WD_ALIGN_VERTICAL</span><br><span class="line"></span><br><span class="line">tables[<span class="number">0</span>].cell(<span class="number">0</span>,<span class="number">0</span>).width = Cm(<span class="number">3</span>)    <span class="comment">#每列必须相同，不相同取最大值</span></span><br><span class="line">tables[<span class="number">0</span>].rows[<span class="number">0</span>].height = Cm(<span class="number">0.7</span>)</span><br><span class="line">tables[<span class="number">0</span>].cell(<span class="number">0</span>,<span class="number">0</span>).paragraphs[<span class="number">0</span>].paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER   <span class="comment">#水平对齐</span></span><br><span class="line">tables[<span class="number">0</span>].cell(<span class="number">0</span>,<span class="number">0</span>).vertical_alignment = WD_ALIGN_VERTICAL.CENTER     <span class="comment">#垂直对齐</span></span><br></pre></td></tr></table></figure>

<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.add_picture(<span class="string">&#x27;image-filename.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图片大小</span></span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Inches</span><br><span class="line">document.add_picture(<span class="string">&#x27;image-filename.png&#x27;</span>, width=Inches(<span class="number">1.0</span>))</span><br></pre></td></tr></table></figure>

<h3 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体/斜体"></a>粗体/斜体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#粗体和斜体只能在run（字节）上添加</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">&#x27;Lorem ipsum &#x27;</span>)</span><br><span class="line">run = paragraph.add_run(<span class="string">&#x27;dolor&#x27;</span>)</span><br><span class="line">run.bold = <span class="literal">True</span></span><br><span class="line">run.italic = <span class="literal">True</span></span><br><span class="line">paragraph.add_run(<span class="string">&#x27; sit amet.&#x27;</span>).bold = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#paragraph也可以不添加任何内容</span></span><br><span class="line">paragraph = document.add_paragraph()</span><br><span class="line">paragraph.add_run(<span class="string">&#x27;Lorem ipsum &#x27;</span>)</span><br><span class="line">paragraph.add_run(<span class="string">&#x27;dolor&#x27;</span>).bold = <span class="literal">True</span></span><br><span class="line">paragraph.add_run(<span class="string">&#x27; sit amet.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="加入分页符"><a href="#加入分页符" class="headerlink" title="加入分页符"></a>加入分页符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">document.add_page_break()</span><br></pre></td></tr></table></figure>

<h2 id="改变已有文件"><a href="#改变已有文件" class="headerlink" title="改变已有文件"></a>改变已有文件</h2><h3 id="打开文档"><a href="#打开文档" class="headerlink" title="打开文档"></a>打开文档</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">document = Document(<span class="string">&#x27;existing-document-file.docx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#另存为（注意如果和已有文件名字一样会覆盖）</span></span><br><span class="line">document.save(<span class="string">&#x27;new-file-name.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="读取文档"><a href="#读取文档" class="headerlink" title="读取文档"></a>读取文档</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">paragraphs = document.paragraphs</span><br><span class="line">print(paragraphs[<span class="number">10</span>].text)</span><br><span class="line">type(paragraphs[<span class="number">10</span>].text)</span><br></pre></td></tr></table></figure>

<h3 id="插入文字"><a href="#插入文字" class="headerlink" title="插入文字"></a>插入文字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aragraphs[<span class="number">10</span>].add_run(<span class="string">&quot;XXX&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#另外一种方式 通过for循环paragraphs列表，判断某段落中是否有你的标注信息（定位信息），有的话，就在该段落后面加上文字</span></span><br><span class="line"><span class="keyword">for</span> par <span class="keyword">in</span> document.paragraphs:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;[sign]&quot;</span> <span class="keyword">in</span> par.text:</span><br><span class="line">        par.add_run(<span class="string">&quot;XXX&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="插入图片-1"><a href="#插入图片-1" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">run = paragraphs[<span class="number">10</span>].add_run()</span><br><span class="line">run.add_picture(<span class="string">&quot;xxx.png&quot;</span>, width = Inches(<span class="number">4.5</span>))</span><br></pre></td></tr></table></figure>

<h2 id="栗子：按模版生成固定文件"><a href="#栗子：按模版生成固定文件" class="headerlink" title="栗子：按模版生成固定文件"></a>栗子：按模版生成固定文件</h2><h3 id="文档准备"><a href="#文档准备" class="headerlink" title="文档准备"></a>文档准备</h3><p>首先准备好一个模版文档</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnm0tn3lsnj30vg0j2dh9.jpg"></p>
<p>哦对，在这个过程中，我还发现mac 的word如果是末尾加空白的下划线有时候加不上（我做模版的时候一直加不上超生气，好不容易找到方法加上了，想单独录一个视频结果却总成功加上，真是玄学。</p>
<p>比如：</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnm0pebhu8g30lv0ezq6n.gif"></p>
<p>解决方法：Option+shift+空格</p>
<h3 id="准备批量生产代码"><a href="#准备批量生产代码" class="headerlink" title="准备批量生产代码"></a>准备批量生产代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备写入内容</span></span><br><span class="line">name=<span class="string">&quot;张三&quot;</span></span><br><span class="line">id_code=<span class="string">&quot;104111199009103531&quot;</span></span><br><span class="line">career=<span class="string">&quot;工程师&quot;</span></span><br><span class="line">working_years=<span class="string">&quot;10&quot;</span></span><br><span class="line">contact=<span class="string">&quot;李四&quot;</span></span><br><span class="line">company=<span class="string">&quot;格物厚德股份有限公司&quot;</span></span><br><span class="line">address=<span class="string">&quot;珠海市横琴新区宝华路6号105室-67425&quot;</span></span><br><span class="line">tel=<span class="string">&quot;0756-8627528&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#准备工作</span></span><br><span class="line">textlist=[name,id_code,career,working_years,company,address,contact,tel]</span><br><span class="line">doc = Document(<span class="string">&quot;证明.docx&quot;</span>)</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写入</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">    print(p.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">        inline = p.runs</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(inline)):</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">in</span> inline[i].text:</span><br><span class="line">                text = inline[i].text.replace(<span class="string">&#x27;XXX&#x27;</span>, textlist[count])</span><br><span class="line">                inline[i].text = text</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">                print(count)</span><br><span class="line">doc.save(<span class="string">&quot;%s_证明.docx&quot;</span>%name)</span><br></pre></td></tr></table></figure>

<p>成功啦！</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnm1eks39oj30t40emgnb.jpg"></p>
<h3 id="通过excel批量写入"><a href="#通过excel批量写入" class="headerlink" title="通过excel批量写入"></a>通过excel批量写入</h3><p>建立excel表</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnm1jza83tj318q0ak76n.jpg"></p>
<p>调整代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment">#准备写入内容</span></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 当前时间元组</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">nt=datetime.now()</span><br><span class="line"><span class="comment"># 可以输入中文年月日</span></span><br><span class="line">datestr=nt.strftime(<span class="string">&#x27;%Y&#123;y&#125;%m&#123;m&#125;%d&#123;d&#125;&#x27;</span>).format(y=<span class="string">&#x27;年&#x27;</span>, m=<span class="string">&#x27;月&#x27;</span>, d=<span class="string">&#x27;日&#x27;</span>)</span><br><span class="line"></span><br><span class="line">xlsx=xlrd.open_workbook(<span class="string">&#x27;test.xlsx&#x27;</span>)</span><br><span class="line">sheet=xlsx.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>,sheet.nrows):</span><br><span class="line">    doc = Document(<span class="string">&quot;证明.docx&quot;</span>)</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    textlist=[]</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">0</span>,sheet.ncols):</span><br><span class="line">        textlist.append(str(sheet.cell_value(row, col)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">                inline = p.runs</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(inline)):</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">in</span> inline[i].text:</span><br><span class="line">                        text = inline[i].text.replace(<span class="string">&#x27;XXX&#x27;</span>, textlist[count])</span><br><span class="line">                        inline[i].text = text</span><br><span class="line">                        count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;X 年   X 月  X 日&#x27;</span> <span class="keyword">in</span> p.text:</span><br><span class="line">                inline = p.runs</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(len(inline)):</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;X 年   X 月  X 日&#x27;</span> <span class="keyword">in</span> inline[i].text:</span><br><span class="line">                        text = inline[i].text.replace(<span class="string">&#x27;X 年   X 月  X 日&#x27;</span>, datestr)</span><br><span class="line">                        inline[i].text = text</span><br><span class="line"></span><br><span class="line">    doc.save(<span class="string">&quot;%s_证明.docx&quot;</span>%textlist[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>然后就成功啦！呱唧呱唧！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/90992109">【极简Python 自动化办公】Python写入Word文档</a></p>
<p><a href="https://juejin.cn/post/6844903929348636685">说说如何使用 python-docx 写入 word 文档</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python小菜鸟备忘录：用python读取word</title>
    <url>/2021/05/23/python%20-%20wordread/</url>
    <content><![CDATA[<p>突发奇想想将读取pdf做anki卡组，以为会很简单，没想到最后卡在读取word上，赶紧记在小本本上，下回读取word就不怕啦！</p>
<hr>
<p>还是用docx库，具体安装之前写过，直接跳过写怎么用啦。</p>
<h2 id="读取文档对象"><a href="#读取文档对象" class="headerlink" title="读取文档对象"></a>读取文档对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docx </span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;C:\test.docx&quot;</span> <span class="comment">#文件路径</span></span><br><span class="line"></span><br><span class="line">file = docx.Document(path) <span class="comment">#读取文档</span></span><br></pre></td></tr></table></figure>

<h2 id="读取文本"><a href="#读取文本" class="headerlink" title="读取文本"></a>读取文本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##获取所有内容</span></span><br><span class="line">content = file.paragraphs <span class="comment">#paragraphs基本上有所有信息 包括文本和后面要说到的属性</span></span><br><span class="line">print(content.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#循环读取文本</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    print(f.text)</span><br></pre></td></tr></table></figure>

<h2 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h2><p>以获取文本颜色为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> file.paragraphs:</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> p.runs: <span class="comment">#p.runs里有该段落每个字符（包括空格）的属性信息 也是list</span></span><br><span class="line">        color = str(n.font.color.rgb) <span class="comment">#获取每个字符的颜色（空格是字符串的None）</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.csdn.net/Pythoncxy/article/details/95339953">Python读取word文档识别字段颜色，解析字段</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mac图片大小调整</title>
    <url>/2020/09/08/mac-photo-sizing/</url>
    <content><![CDATA[<p>有时某些网站会限制上传照片的大小（50K变到10K），或者需要调整照片的大小（2寸照片变成1寸），这些当然可以通过phtooshop简单做到，但是mac预览本身也提供了非常简单的方法可以进行修改。</p>
<p>预览-工具-调整大小。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijgkcz6yuj30zq0m44pj.jpg" alt="mac-photo-01"></p>
<p>调到合适大小就可以啦，分辨率越低、图片大小越小，所占的Size也就越小啦。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gijgof6ohaj30zk0mc4qp.jpg" alt="mac-photo-02"></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>python小菜鸟备忘录：用python做简易爬虫</title>
    <url>/2021/07/02/python%20-%20%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>小菜鸟开始爬虫之旅了！记录一下！</p>
<h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p>安装 requests 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m pip install requests</span><br></pre></td></tr></table></figure>

<p>安装 beautifulsoup4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m pip install beautifulsoup4</span><br></pre></td></tr></table></figure>

<h2 id="爬取网页"><a href="#爬取网页" class="headerlink" title="爬取网页"></a>爬取网页</h2><p>import库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure>

<p>指定 url 并提取网页内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&quot;https://……&quot;</span></span><br><span class="line">r = requests.get(url)  </span><br><span class="line">html_doc = r.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#if 要加headers</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">r = requests.get(res_url, headers=headers)</span><br><span class="line">html_doc = r.text</span><br></pre></td></tr></table></figure>

<h2 id="处理网页内容"><a href="#处理网页内容" class="headerlink" title="处理网页内容"></a>处理网页内容</h2><p>初始化 beautifulsoup4</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>寻找需要的部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#网页里包含多个相同class的内容</span></span><br><span class="line">cols = Soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;col2 articleDetailTeaser&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cols)):</span><br><span class="line">    all_a = cols[i].find_all(<span class="string">&#x27;a&#x27;</span>) <span class="comment">#找到所有指定class底下的链接</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(all_a)):</span><br><span class="line">        res_url = all_a[j][<span class="string">&#x27;href&#x27;</span>] <span class="comment">#[&#x27;href&#x27;]后就是真的链接</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#网页里只有一个相同class的内容</span></span><br><span class="line">links = Soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;linkList download&#x27;</span>)</span><br><span class="line">link = links.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="下载指定链接文件"><a href="#下载指定链接文件" class="headerlink" title="下载指定链接文件"></a>下载指定链接文件</h2><p>pdf</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target_file = requests.get(url)</span><br><span class="line">fo = open(<span class="string">&#x27;name.pdf&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fo.write(target_file.content)  </span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>

<p>mp3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target_file = requests.get(url,stream=<span class="literal">True</span>)</span><br><span class="line">fo = open(<span class="string">&#x27;name.mp3&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">fo.write(res.content)</span><br><span class="line">fo.flush()</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>

<h2 id="其他处理"><a href="#其他处理" class="headerlink" title="其他处理"></a>其他处理</h2><p>速度减慢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode无法调用已安装python库</title>
    <url>/2021/08/08/python-import/</url>
    <content><![CDATA[<p>折腾了半天结果居然是拼错了，emmm……无论如何，记录一下这个过程好啦</p>
<p>一开始以为是环境不一样，开始找怎么查询环境和改变环境。</p>
<ol>
<li><p>查询当前VScode环境（VScode界面左下方）</p>
</li>
<li><p>查询当前terminal环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变termianl的python版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看python安装路径</span></span><br><span class="line">ls -l /usr/<span class="built_in">local</span>/bin/python*</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改</span></span><br><span class="line">ln -s -f /usr/<span class="built_in">local</span>/bin/python3.8 /usr/<span class="built_in">local</span>/bin/python <span class="comment">#这个路径是上面结果第一行的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭terminal再次打开查看路径</span></span><br><span class="line">python --version</span><br></pre></td></tr></table></figure>

<p>当然，我没有改，主要是看到知乎上有人说这样可能会影响一些调用python2的软件。</p>
<p>Reference：<a href="https://zhuanlan.zhihu.com/p/341868531">在Mac终端修改Python版本</a></p>
</li>
</ol>
<p>但是后来想起来用的pip安装的，调用pip安装时都是要先python3 -m pip install xx，所以肯定也是python3，所以就不是这个问题，于是开始想是不是安装路径的问题。</p>
<ol>
<li><p>查看一下当前vscode import路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.path)</span><br></pre></td></tr></table></figure>
</li>
<li><p>经过一同查询，发现pip一般会安装在/usr/local/lib/python3.7/site-packages的路径中，确认刚刚sys.path的结果里有这个地方，再去finder里进这个路径里，看一下里面有没有安装的目标包，发现有，然后把文件名复制粘贴过来就成了，所以结果是拼写错误……</p>
</li>
</ol>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python录音 生成wav 并播放</title>
    <url>/2021/10/29/python-record-play%20audio/</url>
    <content><![CDATA[<h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><h3 id="pyaudio"><a href="#pyaudio" class="headerlink" title="pyaudio"></a>pyaudio</h3><p>安装pyaudio真是曲折的过程……</p>
<p>直接用pip安装会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install pyaudio</span><br><span class="line">&gt;  fatal error: <span class="string">&#x27;portaudio.h&#x27;</span> file not found</span><br></pre></td></tr></table></figure>

<p>所以要先用brew下portaudio，但是我的homebrew死活无法下载portaudio</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install portaudio</span><br><span class="line">&gt; no formulae found</span><br></pre></td></tr></table></figure>

<p>试过重启什么的都不行，最后重新安装了homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/</span><br><span class="line">rm -rf homebrew-core</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>

<p>然后就成功安装了portaudio，但是安装pyaudio依然报错失败，尝试link</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew link portaudio</span><br></pre></td></tr></table></figure>

<p>但是显示已经link了，仍然无法安装。</p>
<p>最后终于找到了方法，手动找到portaudio.h的位置‘usr/local/Cellar/portaudio/19.7.0/include’ ，然后以如下方式安装就可以啦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --global-option=<span class="string">&#x27;build_ext&#x27;</span> --global-option=<span class="string">&#x27;-I/usr/local/Cellar/portaudio/19.7.0/include&#x27;</span> --global-option=<span class="string">&#x27;-L/usr/local/Cellar/portaudio/19.7.0/lib&#x27;</span> pyaudio</span><br></pre></td></tr></table></figure>

<h3 id="playsound-pydub"><a href="#playsound-pydub" class="headerlink" title="playsound/pydub"></a>playsound/pydub</h3><p>这个就正常安装就没问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install playsound pydub</span><br></pre></td></tr></table></figure>

<h2 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h2><p>这个很简单。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playsound <span class="keyword">import</span> playsound</span><br><span class="line"></span><br><span class="line">playsound(<span class="string">&quot;chunk3.wav&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>另外一种方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">from</span> pydub.playback <span class="keyword">import</span> play</span><br><span class="line"></span><br><span class="line"><span class="comment"># read MP3 file</span></span><br><span class="line">song = AudioSegment.from_wav(<span class="string">&quot;/Users/whitelephant/Files/ENN/发音/audio-chunks/chunk3.wav&quot;</span>)</span><br><span class="line"><span class="comment"># song = AudioSegment.from_mp3(&quot;audio_file.mp3&quot;)</span></span><br><span class="line"><span class="comment"># you can also read from other formats such as MP4</span></span><br><span class="line"><span class="comment"># song = AudioSegment.from_file(&quot;audio_file.mp4&quot;, &quot;mp4&quot;)</span></span><br><span class="line">play(song)</span><br></pre></td></tr></table></figure>



<h2 id="录音并生成文件"><a href="#录音并生成文件" class="headerlink" title="录音并生成文件"></a>录音并生成文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CHUNK = <span class="number">1024</span>  <span class="comment"># 每个缓冲区的帧数</span></span><br><span class="line">FORMAT = pyaudio.paInt16  <span class="comment"># 采样位数</span></span><br><span class="line">CHANNELS = <span class="number">1</span>  <span class="comment"># 单声道</span></span><br><span class="line">RATE = <span class="number">44100</span>  <span class="comment"># 采样频率</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_audio</span>(<span class="params">wave_out_path, record_second</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 录音功能 &quot;&quot;&quot;</span></span><br><span class="line">    p = pyaudio.PyAudio()  <span class="comment"># 实例化对象</span></span><br><span class="line">    stream = p.open(format=FORMAT,</span><br><span class="line">                    channels=CHANNELS,</span><br><span class="line">                    rate=RATE,</span><br><span class="line">                    input=<span class="literal">True</span>,</span><br><span class="line">                    frames_per_buffer=CHUNK)  <span class="comment"># 打开流，传入响应参数</span></span><br><span class="line">    wf = wave.open(wave_out_path, <span class="string">&#x27;wb&#x27;</span>)  <span class="comment"># 打开 wav 文件。</span></span><br><span class="line">    wf.setnchannels(CHANNELS)  <span class="comment"># 声道设置</span></span><br><span class="line">    wf.setsampwidth(p.get_sample_size(FORMAT))  <span class="comment"># 采样位数设置</span></span><br><span class="line">    wf.setframerate(RATE)  <span class="comment"># 采样频率设置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, int(RATE * record_second / CHUNK)):</span><br><span class="line">        data = stream.read(CHUNK)</span><br><span class="line">        wf.writeframes(data)  <span class="comment"># 写入数据</span></span><br><span class="line">    stream.stop_stream()  <span class="comment"># 关闭流</span></span><br><span class="line">    stream.close()</span><br><span class="line">    p.terminate()</span><br><span class="line">    wf.close()</span><br><span class="line"></span><br><span class="line">filepath = <span class="string">&#x27;try.wav&#x27;</span></span><br><span class="line">record_audio(filepath,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/92205480">Python实现电脑录音（含音频基础知识讲解）</a></p>
<p><a href="https://www.thepythoncode.com/article/play-and-record-audio-sound-in-python">How to Play and Record Audio in Python</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用python识别语音的音调（speech analysis - intonation)</title>
    <url>/2021/10/27/python-intonation%20detection/</url>
    <content><![CDATA[<p>一直想完成我心中很想做的一个东西，不过好难啊，只好拆接下来，一步一步来咯。</p>
<p>第一步，就是用python识别语音的音调。</p>
<h2 id="praat"><a href="#praat" class="headerlink" title="praat"></a>praat</h2><p>先说个不用python的方法。最初是偶然找到了praat这个软件，很简单，打开praat-点open-read from file - view &amp; edit - pitch - show pitch 就可以啦（注意要短于10秒，如果超过的话zoom in才能看到线条）。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvu76v6bn7j321w0t6qav.jpg" alt="截屏2021-10-27 下午9.37.50"></p>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>再说用python 的2个方法。</p>
<h3 id="amfm-decompy"><a href="#amfm-decompy" class="headerlink" title="amfm_decompy"></a>amfm_decompy</h3><p>首先安装amfm_decompy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install amfm_decompy</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> amfm_decompy.basic_tools <span class="keyword">as</span> basic</span><br><span class="line"><span class="keyword">import</span> amfm_decompy.pYAAPT <span class="keyword">as</span> pYAAPT</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#load audio 注意必须是wav</span></span><br><span class="line">signal = basic.SignalObj(<span class="string">&quot;01.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pYAAPT pitches 生成pitches文件</span></span><br><span class="line">pitch = pYAAPT.yaapt(signal, frame_length = <span class="number">40</span>, tda_frame_length=<span class="number">40</span>,f0_min=<span class="number">75</span>, f0_max=<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#plot </span></span><br><span class="line">plt.plot(pitch.samp_values)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvu7bl4cgmj30ym0tcq58.jpg" alt="截屏2021-10-27 下午9.42.32"></p>
<p>要去掉0的话：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p_nan = pitch.samp_values</span><br><span class="line">p_nan[pitch.samp_values==<span class="number">0</span>] = np.nan</span><br><span class="line">plt.plot(p_nan)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="praat-1"><a href="#praat-1" class="headerlink" title="praat"></a>praat</h3><ol>
<li><p>用刚刚的praat软件 view &amp; edit 后，点击 pitch - pitch listing，生成一个txt文件</p>
</li>
<li><p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">praat = np.genfromtxt(<span class="string">&quot;info.txt&quot;</span>)</span><br><span class="line">praat = praat[:,<span class="number">1</span>]</span><br><span class="line">plt.plot(praat)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>结果：<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvu7ipcosjj30wo0qiabe.jpg" alt="截屏2021-10-27 下午9.49.22"></p>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>两者对比一下，可以看到结果基本差不多。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvu7jt39o5j31780u0go4.jpg" alt="截屏2021-10-27 下午9.50.59"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://medium.com/@neurodatalab/pitch-tracking-or-how-to-estimate-the-fundamental-frequency-in-speech-on-the-examples-of-praat-fe0ca50f61fd">Pitch-Tracking, or How to Estimate the Fundamental Frequency in Speech — on the Examples of Praat, YAAPT, and YIN Algorithms</a></p>
<p>关于进一步增进matplotlib：<a href="https://zhuanlan.zhihu.com/p/109245779">https://zhuanlan.zhihu.com/p/109245779</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用python识别语音中的文字</title>
    <url>/2021/10/27/python-speech%20to%20text/</url>
    <content><![CDATA[<p>接着上一篇，第二步，用python识别语音中的文字。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>前提准备：必须是<strong>wav格式</strong></p>
<p>安装speech recognition包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install SpeechRecognition</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> speech_recognition <span class="keyword">as</span> sr</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;01.wav&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the recognizer</span></span><br><span class="line">r = sr.Recognizer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># open the file</span></span><br><span class="line"><span class="keyword">with</span> sr.AudioFile(filename) <span class="keyword">as</span> source:</span><br><span class="line">    <span class="comment"># listen for the data (load audio to memory)</span></span><br><span class="line">    audio_data = r.record(source)</span><br><span class="line">    <span class="comment"># recognize (convert from speech to text)</span></span><br><span class="line">    text = r.recognize_google(audio_data)</span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure>

<p>就可以啦！</p>
<p>如果想要改变语言不是识别英语的话</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Adding french langauge option</span></span><br><span class="line">text = r.recognize_google(audio_text, language = <span class="string">&quot;fr-FR&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>不过如果语音很大的话会很慢，所以可以使用将它拆解的方式拆开。</p>
<h2 id="长语音识别"><a href="#长语音识别" class="headerlink" title="长语音识别"></a>长语音识别</h2><p>安装pydub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install pydub</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># importing libraries </span></span><br><span class="line"><span class="keyword">import</span> speech_recognition <span class="keyword">as</span> sr </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"><span class="keyword">from</span> pydub.silence <span class="keyword">import</span> split_on_silence</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a speech recognition object</span></span><br><span class="line">r = sr.Recognizer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># a function that splits the audio file into chunks</span></span><br><span class="line"><span class="comment"># and applies speech recognition</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_large_audio_transcription</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Splitting the large audio file into chunks</span></span><br><span class="line"><span class="string">    and apply speech recognition on each of these chunks</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># open the audio file using pydub</span></span><br><span class="line">    sound = AudioSegment.from_wav(path)  </span><br><span class="line">    <span class="comment"># split audio sound where silence is 700 miliseconds or more and get chunks</span></span><br><span class="line">    chunks = split_on_silence(sound,</span><br><span class="line">        <span class="comment"># experiment with this value for your target audio file</span></span><br><span class="line">        min_silence_len = <span class="number">500</span>,</span><br><span class="line">        <span class="comment"># adjust this per requirement</span></span><br><span class="line">        silence_thresh = sound.dBFS<span class="number">-14</span>,</span><br><span class="line">        <span class="comment"># keep the silence for 1 second, adjustable as well</span></span><br><span class="line">        keep_silence=<span class="number">500</span>,</span><br><span class="line">    )</span><br><span class="line">    folder_name = <span class="string">&quot;audio-chunks&quot;</span></span><br><span class="line">    <span class="comment"># create a directory to store the audio chunks</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(folder_name):</span><br><span class="line">        os.mkdir(folder_name)</span><br><span class="line">    whole_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># process each chunk </span></span><br><span class="line">    <span class="keyword">for</span> i, audio_chunk <span class="keyword">in</span> enumerate(chunks, start=<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># export audio chunk and save it in</span></span><br><span class="line">        <span class="comment"># the `folder_name` directory.</span></span><br><span class="line">        chunk_filename = os.path.join(folder_name, <span class="string">f&quot;chunk<span class="subst">&#123;i&#125;</span>.wav&quot;</span>)</span><br><span class="line">        audio_chunk.export(chunk_filename, format=<span class="string">&quot;wav&quot;</span>)</span><br><span class="line">        <span class="comment"># recognize the chunk</span></span><br><span class="line">        <span class="keyword">with</span> sr.AudioFile(chunk_filename) <span class="keyword">as</span> source:</span><br><span class="line">            audio_listened = r.record(source)</span><br><span class="line">            <span class="comment"># try converting it to text</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = r.recognize_google(audio_listened)</span><br><span class="line">            <span class="keyword">except</span> sr.UnknownValueError <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">&quot;Error:&quot;</span>, str(e))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                text = <span class="string">f&quot;<span class="subst">&#123;text.capitalize()&#125;</span>. &quot;</span></span><br><span class="line">                print(chunk_filename, <span class="string">&quot;:&quot;</span>, text)</span><br><span class="line">                whole_text += text</span><br><span class="line">    <span class="comment"># return the text for all chunks detected</span></span><br><span class="line">    <span class="keyword">return</span> whole_text</span><br><span class="line">  </span><br><span class="line">get_large_audio_transcription(<span class="string">&#x27;01.wav&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="录音识别"><a href="#录音识别" class="headerlink" title="录音识别"></a>录音识别</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install PyAudio</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import library</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> speech_recognition <span class="keyword">as</span> sr</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize recognizer class (for recognizing the speech)</span></span><br><span class="line"></span><br><span class="line">r = sr.Recognizer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading Microphone as source</span></span><br><span class="line"><span class="comment"># listening the speech and store in audio_text variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sr.Microphone() <span class="keyword">as</span> source:</span><br><span class="line">    print(<span class="string">&quot;Talk&quot;</span>)</span><br><span class="line">    audio_text = r.listen(source)</span><br><span class="line">    print(<span class="string">&quot;Time over, thanks&quot;</span>)</span><br><span class="line"><span class="comment"># recoginize_() method will throw a request error if the API is unreachable, hence using exception handling</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># using google speech recognition</span></span><br><span class="line">        print(<span class="string">&quot;Text: &quot;</span>+r.recognize_google(audio_text))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">         print(<span class="string">&quot;Sorry, I did not get that&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果说的不是英语</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Adding &quot;tamil language&quot;</span></span><br><span class="line">print(“Text: “+r.recognize_google(audio_text, language = “ta-IN”))</span><br></pre></td></tr></table></figure>



<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://towardsdatascience.com/easy-speech-to-text-with-python-3df0d973b426">Easy Speech-to-Text with Python</a></p>
<p><a href="https://www.thepythoncode.com/article/using-speech-recognition-to-convert-speech-to-text-python">How to Convert Speech to Text in Python</a></p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何无需重新渲染裁剪剪辑视频——使用Quicktime Player</title>
    <url>/2020/09/07/quickplayer-render/</url>
    <content><![CDATA[<ol>
<li>用Quicktime Player打开所需要剪辑的视频 标签栏-编辑-修剪（快捷键command+T)<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicjb4ltvj30ro0o8dh3.jpg" alt="9808904-4e3b9f42045188b1"></li>
</ol>
<ol start="2">
<li><p>滑动视图轴进行修剪（修建过程中将鼠标长时间停留在某个地方 可以打开该位置时间间隔更小的时间轴）</p>
</li>
<li><p>修建完毕后点击“修剪”进行保存 不会覆盖原文件 而是生成新视频</p>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicjl16sfg30xc0htx6p.gif" alt="9808904-3f002fd35eb2c531"></p>
<ol start="4">
<li>点按关闭 命名&amp;选择存储位置</li>
</ol>
<hr>
<p>另外，Quicktime Player也支持将一个视频分离成多段进行重新整合：</p>
<ol>
<li><p>用Quicktime Player打开所需要剪辑的视频 找到要被分离的点（注意：无法在视频开头分离）</p>
</li>
<li><p>标签栏-编辑-分离剪辑（快捷键command+Y)<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicjlnjjvj30o80nugn8.jpg" alt="9808904-5fd1bc0d45e64fac"></p>
</li>
<li><p>滑动各段进行挪移<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1giicjs73feg30xc0ionpd.gif" alt="9808904-aff0080167c8c7d1"></p>
</li>
<li><p>修建完毕后点击“修剪”进行保存 不会覆盖原文件 而是生成新视频</p>
</li>
<li><p>点按关闭 命名&amp;选择存储位置</p>
</li>
</ol>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>Rmarkdown 输出中文 pdf 报错解决</title>
    <url>/2022/01/30/rmarkdown%20-%20pdf%20outpuf/</url>
    <content><![CDATA[<ol>
<li><p>下载 rticles包</p>
</li>
<li><p>在最开始的YAML中增加 documentclass: ctexart、output: rticles::ctex</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyw2zq71iyj30wi06owf8.jpg" alt="image-20220130224533474"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>r</tag>
      </tags>
  </entry>
  <entry>
    <title>you-get mac使用（2021更新）</title>
    <url>/2021/10/20/you-get-2/</url>
    <content><![CDATA[<p><a href="https://whitelephantee.github.io/2020/09/09/you-get/">之前有写过</a>，但是和youtube-dl一样，写了之后迫于各种问题可能还一直没真正用起来……</p>
<p>这两天又抽空折腾了一下，还是不能用……但是写都写了，就发上来好啦</p>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>用you-get</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">you-get https://github.com/soimort/you-get/archive/master.zip</span><br></pre></td></tr></table></figure>

<p>或者pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade you-get</span><br></pre></td></tr></table></figure>

<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>最基本使用，会自动最高画质和下载字幕（if 有）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">you-get <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure>

<p>会显示多种画质/格式，可以进行选择</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">you-get -i <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span> <span class="comment">#显示有哪些选项</span></span><br><span class="line">you-get --itag=18 <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span> <span class="comment">#根据tag挑选</span></span><br></pre></td></tr></table></figure>

<p>设置下载地址和名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">you-get -o ~/Videos -O zoo.webm <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span></span><br></pre></td></tr></table></figure>

<p>只看不下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">you-get -p chromium <span class="string">&#x27;https://www.youtube.com/watch?v=jNQXAC9IVRw&#x27;</span> <span class="comment">#e.g.用chromium</span></span><br></pre></td></tr></table></figure>



<h2 id="关于下载"><a href="#关于下载" class="headerlink" title="关于下载"></a>关于下载</h2><p>断点续传：</p>
<ul>
<li>cmd+c 可以退出下载，再次用相同 command 运行的时候会自动继续下载（基于.downloading 文件）</li>
<li>如果想要重新下载，加 –force<code>/</code>-f</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>如果非视频的网站，会猜测你想要什么，可以用来下载<strong>大图片</strong></li>
<li>如果是关键词，会自动google并下载第一个匹配的视频</li>
</ul>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>downloader</tag>
      </tags>
  </entry>
  <entry>
    <title>用 python GUI（前端package） 做个程序</title>
    <url>/2021/10/29/python-wxpython/</url>
    <content><![CDATA[<p>python的GUI包选择：wxpython</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m pip install wxpython</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/necan/wxPython-tutorial/blob/master/2.%E7%AC%AC%E4%B8%80%E6%AD%A5.md">wxpython的中文简明文档</a></p>
<h2 id="wxpython基本使用"><a href="#wxpython基本使用" class="headerlink" title="wxpython基本使用"></a>wxpython基本使用</h2><h3 id="构建frame"><a href="#构建frame" class="headerlink" title="构建frame"></a>构建frame</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个应用程序对象</span></span><br><span class="line">app = wx.App()</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建frame</span></span><br><span class="line">frame = wx.Frame(<span class="literal">None</span>, title=<span class="string">&#x27;Simple application&#x27;</span>, size=(<span class="number">300</span>,<span class="number">200</span>)) <span class="comment">#设置大小</span></span><br><span class="line">frame.Center() <span class="comment">#居中</span></span><br><span class="line">frame.Show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">app.MainLoop()</span><br></pre></td></tr></table></figure>

<p>###基本元素</p>
<p>文字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基本</span></span><br><span class="line">text = wx.StaticText(frame, label=<span class="string">&#x27;Please enter filepath&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#位置</span></span><br><span class="line">text = wx.StaticText(frame, label=<span class="string">&#x27;Please enter filepath&#x27;</span>,style = wx.ALIGN_CENTER)</span><br><span class="line">text = wx.StaticText(panel, label=<span class="string">&#x27;Please enter filepath&#x27;</span>, pos = (<span class="number">500</span>,<span class="number">400</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置字体</span></span><br><span class="line"><span class="comment">## 先设置好</span></span><br><span class="line">font = wx.SystemSettings.GetFont(wx.SYS_SYSTEM_FONT)</span><br><span class="line">font.SetPointSize(<span class="number">9</span>)</span><br><span class="line"><span class="comment">## 用时候就加上</span></span><br><span class="line">st1.SetFont(font) <span class="comment">#st1是static text1</span></span><br></pre></td></tr></table></figure>

<p>按钮</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># button触发内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onButton</span>(<span class="params">event</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Button pressed.&quot;</span>)</span><br><span class="line"> </span><br><span class="line">panel = wx.Panel(frame)</span><br><span class="line"></span><br><span class="line"><span class="comment">#button基本设置</span></span><br><span class="line">button = wx.Button(panel, wx.ID_ANY, label=<span class="string">&#x27;GO&#x27;</span>,size=(<span class="number">70</span>,<span class="number">30</span>),pos=(<span class="number">400</span>,<span class="number">400</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#button链接触发内容</span></span><br><span class="line">button.Bind(wx.EVT_BUTTON, onButton)</span><br><span class="line"></span><br><span class="line"><span class="comment">#带有图标的按钮</span></span><br><span class="line">bmp = wx.Bitmap(<span class="string">&quot;call-start.png&quot;</span>, wx.BITMAP_TYPE_ANY)</span><br><span class="line">button = wx.BitmapButton(panel, id=wx.ID_ANY, bitmap=bmp,</span><br><span class="line">                          size=(bmp.GetWidth()+<span class="number">10</span>, bmp.GetHeight()+<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>勾选眶</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cb1 = wx.CheckBox(panel, label=<span class="string">&#x27;Case Sensitive&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>文字输入框</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最基本</span></span><br><span class="line">tc = wx.TextCtrl(panel)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多行（大的框）</span></span><br><span class="line">tc2 = wx.TextCtrl(panel, style=wx.TE_MULTILINE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#右侧输入文字</span></span><br><span class="line">wx.TextCtrl(panel, style=wx.TE_RIGHT)</span><br></pre></td></tr></table></figure>

<p>图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">png = wx.Image(imageFile, wx.BITMAP_TYPE_ANY).ConvertToBitmap()</span><br><span class="line">wx.StaticBitmap(self, <span class="number">-1</span>, png, (<span class="number">10</span>, <span class="number">5</span>), (png.GetWidth(), png.GetHeight()))</span><br></pre></td></tr></table></figure>

<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>boxSizer 使我们能够将多个组件放入行或列中。 我们可以将另一个 sizer 放入现有的 sizer 中。 这样我们可以创建非常复杂的布局。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#竖着的</span></span><br><span class="line">vbox = wx.BoxSizer(wx.VERTICAL)</span><br><span class="line"></span><br><span class="line"><span class="comment">#横着的</span></span><br><span class="line">hbox1 = wx.BoxSizer(wx.HORIZONTAL)</span><br><span class="line"></span><br><span class="line"><span class="comment">#最整体的那个要放在panel里</span></span><br><span class="line">panel.SetSizer(vbox)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把元素加进box里</span></span><br><span class="line">hbox1.Add(st1, flag=wx.RIGHT, border=<span class="number">8</span>) <span class="comment">#flag和border指的是右边加8的margin 共有wx.LEFT，wx.RIGHT，wx.BOTTOM，wx.TOP，wx.ALL</span></span><br><span class="line">vbox.Add(hbox1, flag=wx.EXPAND|wx.LEFT|wx.RIGHT|wx.TOP, border=<span class="number">10</span>) <span class="comment">#多个方向加margin；wx.EXPAND 是指元素将使用分配给它的所有空间</span></span><br><span class="line"> vbox.Add(hbox5, flag=wx.ALIGN_RIGHT|wx.RIGHT, border=<span class="number">10</span>) <span class="comment">#默认左对齐 如果更改用align；共有wx.ALIGN_LEFT，wx.ALIGN_RIGHT，wx.ALIGN_TOP，wx.ALIGN_BOTTOM，wx.ALIGN_CENTER_VERTICAL，wx.ALIGN_CENTER_HORIZONTAL，wx.ALIGN_CENTER</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#加空白</span></span><br><span class="line">vbox.Add((<span class="number">-1</span>, <span class="number">25</span>))</span><br></pre></td></tr></table></figure>

<p>wx.GridSizer: 在二维表格中展示组件。 表格中的每个单元具有相同的大小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 wx.GridSizer(int rows=1, int cols=0, int vgap=0, int hgap=0)行数和列数，纵向和横向的单元格之间的间隔（单位是像素）</span></span><br><span class="line">gs = wx.GridSizer(<span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加内容（忽略self）</span></span><br><span class="line">gs.AddMany( [(wx.Button(self, label=<span class="string">&#x27;Cls&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;Bck&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.StaticText(self), wx.EXPAND), <span class="comment">#空白格</span></span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;Close&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;7&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;8&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;9&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;/&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;4&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;5&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;6&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;*&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;1&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;2&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;3&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;-&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;0&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;.&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;=&#x27;</span>), <span class="number">0</span>, wx.EXPAND),</span><br><span class="line">            (wx.Button(self, label=<span class="string">&#x27;+&#x27;</span>), <span class="number">0</span>, wx.EXPAND) ])</span><br></pre></td></tr></table></figure>

<p>wx.FlexGridSizer：与 <code>wx.GridSizer</code> 类似。它也在一个二维表中的放置组件。它增加了一些灵活性。<code>wx.GridSizer</code> 单元格大小相同。<code>wx.FlexGridSizer</code> 中的所有单元格在同一行中具有相同的高度。所有单元在一列中具有相同的宽度。但是所有的行和列不需要是同样的高度或宽度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化 wx.FlexGridSizer(int rows=1, int cols=0, int vgap=0, int hgap=0) 行，列，每行/列之间的gap</span></span><br><span class="line">fgs = wx.FlexGridSizer(<span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">fgs.AddMany([(title), (tc1, <span class="number">1</span>, wx.EXPAND), </span><br><span class="line">             (author),(tc2, <span class="number">1</span>, wx.EXPAND), </span><br><span class="line">             (review, <span class="number">1</span>, wx.EXPAND), (tc3, <span class="number">1</span>, wx.EXPAND)])</span><br><span class="line"></span><br><span class="line">fgs.AddGrowableRow(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">fgs.AddGrowableCol(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>wx.GridBagSizer：是 wxPython 中最灵活的 size</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化wx.GridBagSizer(integer vgap, integer hgap) 所有元素之间的间隔（单位为像素）</span></span><br><span class="line">sizer = wx.GridBagSizer(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加Add(self, item, tuple pos, tuple span=wx.DefaultSpan, integer flag=0, integer border=0, userData=None)</span></span><br><span class="line">sizer.Add(text, pos=(<span class="number">0</span>, <span class="number">0</span>), flag=wx.TOP|wx.LEFT|wx.BOTTOM, border=<span class="number">5</span>)</span><br><span class="line">sizer.Add(tc, pos=(<span class="number">1</span>, <span class="number">0</span>), span=(<span class="number">1</span>, <span class="number">5</span>),flag=wx.EXPAND|wx.LEFT|wx.RIGHT, border=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">sizer.AddGrowableCol(<span class="number">1</span>)</span><br><span class="line">sizer.AddGrowableRow(<span class="number">2</span>)</span><br><span class="line">panel.SetSizer(sizer)</span><br></pre></td></tr></table></figure>

<h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3><p>拖拽文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileDrop</span>(<span class="params">wx.FileDropTarget</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, window</span>):</span></span><br><span class="line"></span><br><span class="line">        wx.FileDropTarget.__init__(self) <span class="comment">#file drop</span></span><br><span class="line">        self.window = window</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">OnDropFiles</span>(<span class="params">self, x, y, filenames</span>):</span> <span class="comment">#file drop之后的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                file = open(name, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                text = file.read()</span><br><span class="line">                self.window.WriteText(text)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> IOError <span class="keyword">as</span> error:</span><br><span class="line"></span><br><span class="line">                msg = <span class="string">&quot;Error opening file\n &#123;&#125;&quot;</span>.format(str(error))</span><br><span class="line">                dlg = wx.MessageDialog(<span class="literal">None</span>, msg)</span><br><span class="line">                dlg.ShowModal()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> error:</span><br><span class="line"></span><br><span class="line">                msg = <span class="string">&quot;Cannot open non ascii files\n &#123;&#125;&quot;</span>.format(str(error))</span><br><span class="line">                dlg = wx.MessageDialog(<span class="literal">None</span>, msg)</span><br><span class="line">                dlg.ShowModal()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">                file.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>(<span class="params">wx.Frame</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kw</span>):</span></span><br><span class="line">        super(Example, self).__init__(*args, **kw)</span><br><span class="line"></span><br><span class="line">        self.InitUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">InitUI</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        self.text = wx.TextCtrl(self, style = wx.TE_MULTILINE)</span><br><span class="line">        dt = FileDrop(self.text)</span><br><span class="line"></span><br><span class="line">        self.text.SetDropTarget(dt)</span><br><span class="line"></span><br><span class="line">        self.SetTitle(<span class="string">&#x27;File drag and drop&#x27;</span>)</span><br><span class="line">        self.Centre()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    app = wx.App()</span><br><span class="line">    ex = Example(<span class="literal">None</span>)</span><br><span class="line">    ex.Show()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>you-get安装和使用</title>
    <url>/2020/09/09/you-get/</url>
    <content><![CDATA[<p><a href="https://github.com/soimort/you-get#supported-sites">You-get</a> 和 <a href="https://whitelephantee.github.io/2020/09/08/youtube-dl/">youtube-dl</a> 一样，都是命令行下载工具，不过you-get是国人开发的，对国内视频网站的支持更好。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>用homebrew安装。</p>
<pre><code>brew install you-get</code></pre>
<p>再升级一下。</p>
<pre><code>pip3 install --upgrade you-get</code></pre>
<p>然后就可以用啦。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>使用和youtube-dl也很相似，超简单。</p>
<pre><code>you-get &#123;url&#125;</code></pre>
<p>you-get也支持断点续传，会留有之前的记录。</p>
<p>可以设置存储位置(-o)和存储名称(-0)。</p>
<pre><code>you-get -o ~/Videos -O zoo.webm &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></pre>
<p>设置代理</p>
<pre><code>you-get -x 127.0.0.1:8087 &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></pre>
<p>也可以把视频发送到播放器或者浏览器中，不要广告，</p>
<pre><code> you-get -p vlc &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;
 you-get -p chromium &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></pre>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>downloader</tag>
      </tags>
  </entry>
  <entry>
    <title>youtube-dl mac使用（2021更新）</title>
    <url>/2021/10/18/youtube-dl-2/</url>
    <content><![CDATA[<p>上次写过youtube-dl的<a href="https://whitelephantee.github.io/2020/09/08/youtube-dl/">一些基本使用方法</a>，但是实际上由于某些原因一直没有办法真正用上……</p>
<p>今天突发奇想又折腾了一下，终于真的能下载东西了！</p>
<p>记录一下一些有用的东西～</p>
<p>最基本的下载方法（会下载到terminal当前的文件夹下）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">youtube-dl <span class="string">&#x27;http://...&#x27;</span></span><br></pre></td></tr></table></figure>

<p>嗯，好像没什么需要补充的了，其他需要的原来的文章里都有，就是这样啦～</p>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>downloader</tag>
      </tags>
  </entry>
  <entry>
    <title>Youtube-dl 安装使用指南</title>
    <url>/2020/09/08/youtube-dl/</url>
    <content><![CDATA[<p>youtube-dl是非常有名的命令行下载工具，使用方法简单，支持的<a href="https://ytdl-org.github.io/youtube-dl/supportedsites.htm">网站</a>也多。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>终端中输入。</p>
<pre><code>brew install youtube-dl</code></pre>
<p>然后查看一下版本，我下载的时候brew下载的最高版本只能是2018.07.21，但实际youtube-dl更新非常勤，截止我写这篇文章时（2020.09.08），已经有2020.09.06版本了，因为这类下载工具经常需要更新来保证能够继续下载，所以要确保到最新的版本，</p>
<pre><code>youtube-dl --version</code></pre>
<p>如果不是最新版本的话。</p>
<pre><code>sudo youtube-dl --update</code></pre>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>youtube-dl的基本使用方法非常简单。</p>
<pre><code>youtube-dl &#123;url&#125;</code></pre>
<p>就可以啦，会下载到所在的位置。</p>
<p>当然，youtube-dl也提供非常多样的选项以供使用，常用比如说——</p>
<pre><code>#标准用法
youtube-dl [OPTIONS] URL [URL...]</code></pre>
<p>调整存储位置+修改下载视频的名称。</p>
<pre><code>#比如要放到 Downloads 文件夹
youtube-dl -o &#39;/Users/&#123;username&#125;/Downloads/%(title)s.%(ext)s&#39; &#123;url&#125;</code></pre>
<p>下载字幕</p>
<pre><code>#下载字幕文件
--write-sub                  
#下载youtube自动生成的cc字幕
--write-auto-sub    </code></pre>
<p>只下载音频</p>
<pre><code>-x</code></pre>
<p>下载youtube列表。</p>
<pre><code>--playlist-start NUMBER          指定列表中开始下载的视频(默认为1)
--playlist-end NUMBER            指定列表中结束的视频(默认为last)
--playlist-items ITEM_SPEC       指定列表中要下载的视频项目编号.如：&quot;--playlist-items 1,2,5,8&quot;或&quot;--playlist-items 1-3,7,10-13&quot;
--match-title REGEX              下载标题匹配的视频(正则表达式或区分大小写的字符串)
--reject-title REGEX             跳过下载标题匹配的视频(正则表达式或区分大小写的字符串)
--max-downloads NUMBER           下载NUMBER个视频后停止
--no-playlist                    当视频链接到一个视频和一个播放列表时，仅下载视频
--yes-playlist                   当视频链接到一个视频和一个播放列表时，下载视频和播放列表</code></pre>
<p>下载多个视频时，默认如果一个视频发生错误就终止下载，可以用-i改成忽略错误继续下载。</p>
<pre><code>-i, --ignore-errors              遇到下载错误时跳过</code></pre>
<p>代理协议。</p>
<pre><code>--proxy URL                      使用HTTP/HTTPS/SOCKS协议的代理，如socks5://127.0.0.1:1080/.</code></pre>
<p>在视频中嵌入字幕。</p>
<pre><code>--embed-subs                     在视频中嵌入字幕(仅适用于mp4,webm和mkv视频）</code></pre>
<p>对视频进行转码，不过需要装ffmpeg或者其他转码的工具。</p>
<pre><code>--recode-video FORMAT            必要时将视频转码为其他格式(当前支持: mp4|flv|ogg|webm|mkv|avi)</code></pre>
<p>配置文件（后面会说到）。</p>
<pre><code>--ignore-config                  不读取配置文件，当时用了全局配置文件/etc/youtube-dl.conf:不再读取 ~/.config/youtube-dl/config 
--config-location PATH           使用指定路径下的配置文件</code></pre>
<h1 id="其他可选命令"><a href="#其他可选命令" class="headerlink" title="其他可选命令"></a>其他可选命令</h1><p>我这里粘贴了这位<a href="https://www.jianshu.com/p/2a7244199bfa">好心人</a> 的部分翻译（侵删），留作参考。</p>
<p>通用选项</p>
<pre><code>-h, --help                       打印帮助文档
--version                        打印版本信息
-U, --update                     更新到最新版(需要权限)
-i, --ignore-errors              遇到下载错误时跳过
--abort-on-error                 遇到下载错误时终止
--dump-user-agent                显示当前使用的浏览器(User-agent)
--list-extractors                列出所有的提取器(支持的网站)
--extractor-descriptions         同上
--force-generic-extractor        强制使用通用提取器下载
--default-search PREFIX          使用此前缀补充不完整的URLs，例如：&quot;ytsearch2 yt-dl&quot; 从youtube搜索并下载两个关于yt-dl视频. 使用&quot;auto&quot;youtube-dl就会猜一个，一般效果等价于&quot;ytsearch&quot;(&quot;auto_warning&quot;猜测时加入警告).我已知支持的PREFIX：ytsearch (youtube), ytsearchdate (youtube), yvsearch (yahoo videos), gvsearch (google videos)
--ignore-config                  不读取配置文件，当时用了全局配置文件/etc/youtube-dl.conf:不再读取 ~/.config/youtube-dl/config (%APPDATA%/youtube-dl/config.txt on Windows)
--config-location PATH           使用指定路径下的配置文件
--flat-playlist                  列出列表视频但不下载
--mark-watched                   标记看过此视频 (YouTube only)
--no-mark-watched                不标记看过此视频 (YouTube only)
--no-color                       打印到屏幕上的代码不带色</code></pre>
<p>网络选项</p>
<pre><code>--proxy URL                      使用HTTP/HTTPS/SOCKS协议的代理.如：socks5://127.0.0.1:1080/.
--socket-timeout SECONDS         放弃连接前等待时间
--source-address IP              绑定的客户端IP地址
-4, --force-ipv4                 所有连接通过IPv4
-6, --force-ipv6                 所有连接通过IPv6</code></pre>
<p>地理限制</p>
<pre><code>--geo-verification-proxy URL     使用此代理地址测试一些有地理限制的地址
--geo-bypass                     绕过地理限制通过伪装X-Forwarded-For HTTP头部的客户端ip (实验)
--no-geo-bypass                  不 绕过地理限制通过伪装X-Forwarded-For HTTP头部的客户端ip (实验)
--geo-bypass-country CODE        强制绕过地理限制通过提供准确的ISO 3166-2标准的国别代码(实验) 注：以上三个实验参数实测未成功</code></pre>
<p>视频选择</p>
<pre><code>--playlist-start NUMBER          指定列表中开始下载的视频(默认为1)
--playlist-end NUMBER            指定列表中结束的视频(默认为last)
--playlist-items ITEM_SPEC       指定列表中要下载的视频项目编号.如：&quot;--playlist-items 1,2,5,8&quot;或&quot;--playlist-items 1-3,7,10-13&quot;
--match-title REGEX              下载标题匹配的视频(正则表达式或区分大小写的字符串)
--reject-title REGEX             跳过下载标题匹配的视频(正则表达式或区分大小写的字符串)
--max-downloads NUMBER           下载NUMBER个视频后停止
--min-filesize SIZE              不下载小于SIZE的视频(e.g. 50k or 44.6m)
--max-filesize SIZE              不下载大于SIZE的视频(e.g. 50k or 44.6m)
--date DATE                      仅下载上传日期在指定日期的视频
--datebefore DATE                仅下载上传日期在指定日期或之前的视频 (i.e. inclusive)
--dateafter DATE                 仅下载上传日期在指定日期或之后的视频 (i.e. inclusive)
--min-views COUNT                不下载观影数小于指定值的视频
--max-views COUNT                不下载观影数大于指定值的视频
--match-filter FILTER            通用视频过滤器. Specify any key (see help for -o for a list of available keys) to match if the key is present, !key to check if the key is not present, key &gt; NUMBER (like &quot;comment_count &gt; 12&quot;, also works with &gt;=, &lt;, &lt;=, !=, =) to compare against a number,key = ‘LITERAL‘ (like &quot;uploader = ‘Mike Smith‘&quot;, also works with !=) to match against a string literal and &amp; to require multiple matches. Values which are not known are excluded unless you put a question mark (?) after the operator. For example, to only match videos that have been liked more than 100 times and disliked less than 50 times (or the dislike functionality is not available at the given service), but who also have a description, use --match-filter &quot;like_count &gt; 100 &amp; dislike_count &lt;? 50 &amp; description&quot; .
--no-playlist                    当视频链接到一个视频和一个播放列表时，仅下载视频
--yes-playlist                   当视频链接到一个视频和一个播放列表时，下载视频和播放列表
--age-limit YEARS                下载合适上传年限的视频
--download-archive FILE          仅下载档案文件中未列出的影片，已下载的记录ID
--include-ads                    同时下载广告(实验)</code></pre>
<p>下载选项</p>
<pre><code>-r, --limit-rate RATE            最大bps (e.g. 50K or 4.2M)
-R, --retries RETRIES            重试次数 (默认10), or &quot;infinite&quot;.
--fragment-retries RETRIES       一个分段的最大重试次数(default is 10), or &quot;infinite&quot; (DASH, hlsnative and ISM)
--skip-unavailable-fragments     跳过不可用分段(DASH, hlsnative and ISM)
--abort-on-unavailable-fragment  放弃某个分段当不可获取时
--keep-fragments                 下载完成后，将下载的片段保存在磁盘上; 片段默认被删除
--buffer-size SIZE               设置缓冲区大小buffer (e.g. 1024 or 16K) (default is 1024)
--no-resize-buffer               不自动调整缓冲区大小.默认情况下自动调整
--playlist-reverse               以相反的顺序下载播放列表视频
--playlist-random                以随机的顺序下载播放列表视频
--xattr-set-filesize             Set file xattribute ytdl.filesize with expected file size (experimental)
--hls-prefer-native              使用本机默认HLS下载器而不是ffmpeg
--hls-prefer-ffmpeg              使用ffmpeg而不是本机HLS下载器
--hls-use-mpegts                 使用TS流容器来存放HLS视频,一些高级播放器允许在下载的同时播放视频
--external-downloader COMMAND    使用指定的第三方下载工具,当前支持：aria2c,avconv,axel,curl,ffmpeg,httpie,wget
--external-downloader-args ARGS  给第三方下载工具指定参数，如：--external-downloader aria2c --external-downloader-args -j8</code></pre>
<p>文件系统选项</p>
<pre><code>-a, --batch-file FILE            文件中包含需要下载的URL
--id                             仅使用文件名中的视频ID
-o, --output TEMPLATE            Output filename template, see the &quot;OUTPUT TEMPLATE&quot; for all the info
--autonumber-start NUMBER        指定%(autonumber)s的起始值(默认为1)
--restrict-filenames             将文件名限制为ASCII字符，并避免文件名中的“＆”和空格
-w, --no-overwrites              不要覆盖文件
-c, --continue                   强制恢复部分下载的文件。 默认情况下，youtube-dl仅在可能时将恢复下载。
--no-continue                    不要恢复部分下载的文件(从头开始重新启动)
--no-part                        不使用.part文件 - 直接写入输出文件
--no-mtime                       不使用Last-modified header来设置文件最后修改时间
--write-description              将视频描述写入.description文件
--write-info-json                将视频元数据写入.info.json文件
--write-annotations              将视频注释写入.annotations.xml文件
--load-info-json FILE            包含视频信息的JSON文件(使用“--write-info-json”选项创建)
--cookies FILE                   文件从中读取Cookie(经测试，export cookies插件可以使用，但firebug导出的cookies导致错误,chrome下请用cookies.txt)注意：不同平台windows、Linux、OSX之间需要转换CE LF才能使用！
--cache-dir DIR                  文件存储位置。youtube-dl需要永久保存一些下载的信息。默认为$XDG_CACHE_HOME/youtube-dl或/.cache/youtube-dl。目前，只有YouTube播放器文件（对于具有模糊签名的视频）进行缓存，但可能会发生变化。
--no-cache-dir                   不用缓存
--rm-cache-dir                   删除所有缓存文件</code></pre>
<p>视频格式选项</p>
<pre><code>-f, --format FORMAT              视频格式代码,查看&quot;FORMAT SELECTION&quot;获取所有信息
--all-formats                    获取所有视频格式
--prefer-free-formats            开源的视频格式优先，除非有特定的请求
-F, --list-formats               列出请求视频的所有可用格式
--youtube-skip-dash-manifest     不要下载关于YouTube视频的DASH清单和相关数据
--merge-output-format FORMAT     如果需要合并(例如bestvideo + bestaudio)，则输出到给定的容器格式。mkv，mp4，ogg，webm，flv之一。如果不需要合并，则忽略</code></pre>
<p>字幕选项</p>
<pre><code>--write-sub                      下载字幕文件
--write-auto-sub                 下载自动生成的字幕文件 (YouTube only)
--all-subs                       下载所有可用的字幕
--list-subs                      列出所有字幕
--sub-format FORMAT              字幕格式,接受格式偏好,如：&quot;srt&quot; or &quot;ass/srt/best&quot;
--sub-lang LANGS                 要下载的字幕的语言(可选)用逗号分隔,请使用--list-subs表示可用的语言标签</code></pre>
<p>后处理选项 </p>
<pre><code>-x, --extract-audio              将视频文件转换为纯音频文件(需要ffmpeg或avconv和ffprobe或avprobe)
--audio-format FORMAT            指定音频格式: &quot;best&quot;, &quot;aac&quot;, &quot;flac&quot;, &quot;mp3&quot;, &quot;m4a&quot;, &quot;opus&quot;, &quot;vorbis&quot;, or &quot;wav&quot;; &quot;best&quot; by default;-x存在时无效
--audio-quality QUALITY          指定ffmpeg/avconv音频质量,为VBR插入一个0(best)-9(worse)的值(默认5),或者指定比特率
--recode-video FORMAT            必要时将视频转码为其他格式(当前支持: mp4|flv|ogg|webm|mkv|avi)
--postprocessor-args ARGS        给后处理器提供这些参数
-k, --keep-video                 视频文件在后处理后保存在磁盘上; 该视频默认被删除
--no-post-overwrites             不要覆盖后处理文件; 默认情况下,后处理文件将被覆盖
--embed-subs                     在视频中嵌入字幕(仅适用于mp4,webm和mkv视频）
--embed-thumbnail                将缩略图嵌入音频作为封面艺术
--add-metadata                   将元数据写入视频文件
--metadata-from-title FORMAT     从视频标题中解析附加元数据，如歌曲标题/艺术家。格式语法和--output相似.也可以使用带有命名捕获组的正则表达式。解析的参数替换现有值。Example: --metadata-from-title &quot;%(artist)s - %(title)s&quot; matches a title like &quot;Coldplay - Paradise&quot;. Example (regex): --metadata-from-title &quot;(?P&lt;artist&gt;.+?) - (?P&lt;title&gt;.+)&quot;
--xattrs                         将元数据写入视频文件的xattrs(使用dublin core 和 xdg标准)
--fixup POLICY                   自动更正文件的已知故障。never(不做警告), warn(只发出警告), detect_or_warn (默认;如果可以的话修复文件,否则警告)
--prefer-avconv                  后处理时相较ffmpeg偏向于avconv
--prefer-ffmpeg                  后处理优先使用ffmpeg
--ffmpeg-location PATH           ffmpeg/avconv程序位置;PATH为二进制所在文件夹或者目录.
--exec CMD                       在下载后对文件执行命令,类似于find -exec语法.示例：--exec‘adb push &#123;&#125; /sdcard/Music/ &amp;&amp; rm &#123;&#125;‘
--convert-subs FORMAT            转换字幕格式(当前支持: srt|ass|vtt)</code></pre>
]]></content>
      <categories>
        <category>鼓捣电脑</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>downloader</tag>
      </tags>
  </entry>
</search>
